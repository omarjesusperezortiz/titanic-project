{"version":3,"file":"static/js/660.fd2a075d.chunk.js","mappings":"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","sources":["views/infographics/Bars.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { ResponsiveBar } from '@nivo/bar'\nimport PropTypes from 'prop-types'\nimport { CCol, CCard, CCardHeader, CCardBody, CButtonGroup, CButton } from '@coreui/react'\nimport titanicData from '../../data/titanic'\n\nconst titanicDataRaw = titanicData\n\nconst titanicDataClean = titanicDataRaw.map(({ pclass, age, survived, sex }) => {\n  return {\n    pclass,\n    age,\n    survived,\n    sex,\n  }\n})\n\nconst survived = ({ survived }) => {\n  return survived === true\n}\nconst not_survived = ({ survived }) => {\n  return survived === false\n}\nconst firstClass = ({ pclass }) => {\n  return pclass === 1\n}\nconst secondClass = ({ pclass }) => {\n  return pclass === 2\n}\nconst thirdClass = ({ pclass }) => {\n  return pclass === 3\n}\nconst isMale = ({ sex }) => {\n  return sex === 'male'\n}\nconst isFemale = ({ sex }) => {\n  return sex === 'female'\n}\n\n//By Age\n\nconst titanicDataNull = titanicDataClean.filter(({ age }) => {\n  return age === null\n})\nconst titanicDataChild = titanicDataClean.filter(({ age }) => {\n  return age >= 0.1 && age < 16\n})\nconst titanicDataYoung = titanicDataClean.filter(({ age }) => {\n  return age >= 16 && age < 30\n})\nconst titanicDataAdult = titanicDataClean.filter(({ age }) => {\n  return age >= 30 && age < 60\n})\nconst titanicDataElderly = titanicDataClean.filter(({ age }) => {\n  return age >= 60\n})\n\n//By Age If Survived\n\nconst titanicDataNullSurvived = titanicDataNull.filter(survived)\nconst titanicDataChildSurvived = titanicDataChild.filter(survived)\nconst titanicDataYoungSurvived = titanicDataYoung.filter(survived)\nconst titanicDataAdultSurvived = titanicDataAdult.filter(survived)\nconst titanicDataElderlySurvived = titanicDataElderly.filter(survived)\n\nconst titanicDataNullnot_survived = titanicDataNull.filter(not_survived)\nconst titanicDataChildnot_survived = titanicDataChild.filter(not_survived)\nconst titanicDataYoungnot_survived = titanicDataYoung.filter(not_survived)\nconst titanicDataAdultnot_survived = titanicDataAdult.filter(not_survived)\nconst titanicDataElderlynot_survived = titanicDataElderly.filter(not_survived)\n\nconst dataFull = [\n  {\n    age: 'Undefined',\n    survived: titanicDataNullSurvived,\n    not_survived: titanicDataNullnot_survived,\n  },\n  {\n    age: '< 15',\n    survived: titanicDataChildSurvived,\n    not_survived: titanicDataChildnot_survived,\n  },\n  {\n    age: '16 - 29',\n    survived: titanicDataYoungSurvived,\n    not_survived: titanicDataYoungnot_survived,\n  },\n  {\n    age: '30 - 59',\n    survived: titanicDataAdultSurvived,\n    not_survived: titanicDataAdultnot_survived,\n  },\n  {\n    age: '60 <',\n    survived: titanicDataElderlySurvived,\n    not_survived: titanicDataElderlynot_survived,\n  },\n]\n\nconst data = dataFull.map(({ age, survived, not_survived }) => {\n  return {\n    age: age,\n    survived: survived.length,\n    not_survived: not_survived.length,\n  }\n})\n\nconst dataByMale = dataFull.map(({ age, survived, not_survived }) => {\n  return {\n    age: age,\n    survived: survived.filter(isMale).length,\n    not_survived: not_survived.filter(isMale).length,\n  }\n})\n\nconst dataByFemale = dataFull.map(({ age, survived, not_survived }) => {\n  return {\n    age: age,\n    survived: survived.filter(isFemale).length,\n    not_survived: not_survived.filter(isFemale).length,\n  }\n})\nconst dataFirstClass = dataFull.map(({ age, survived, not_survived }) => {\n  return {\n    age: age,\n    survived: survived.filter(firstClass).length,\n    not_survived: not_survived.filter(firstClass).length,\n  }\n})\nconst dataSecondClass = dataFull.map(({ age, survived, not_survived }) => {\n  return {\n    age: age,\n    survived: survived.filter(secondClass).length,\n    not_survived: not_survived.filter(secondClass).length,\n  }\n})\nconst dataThirdClass = dataFull.map(({ age, survived, not_survived }) => {\n  return {\n    age: age,\n    survived: survived.filter(thirdClass).length,\n    not_survived: not_survived.filter(thirdClass).length,\n  }\n})\n\nconst MyResponsiveBar = ({ data }) => (\n  <ResponsiveBar\n    data={data}\n    keys={['survived', 'not_survived']}\n    indexBy=\"age\"\n    margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n    padding={0.3}\n    valueScale={{ type: 'linear' }}\n    indexScale={{ type: 'band', round: true }}\n    colors={{ scheme: 'nivo' }}\n    defs={[\n      {\n        id: 'dots',\n        type: 'patternDots',\n        background: 'inherit',\n        color: '#38bcb2',\n        size: 4,\n        padding: 1,\n        stagger: true,\n      },\n      {\n        id: 'lines',\n        type: 'patternLines',\n        background: 'inherit',\n        color: '#eed312',\n        rotation: -45,\n        lineWidth: 6,\n        spacing: 10,\n      },\n    ]}\n    fill={[\n      {\n        match: {\n          id: 'asd',\n        },\n        id: 'dots',\n      },\n      {\n        match: {\n          id: 'not survived',\n        },\n        id: 'lines',\n      },\n    ]}\n    borderColor={{\n      from: 'color',\n      modifiers: [['darker', 1.6]],\n    }}\n    axisTop={null}\n    axisRight={null}\n    axisBottom={{\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'age',\n      legendPosition: 'middle',\n      legendOffset: 32,\n    }}\n    axisLeft={{\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'survivors',\n      legendPosition: 'middle',\n      legendOffset: -40,\n    }}\n    labelSkipWidth={12}\n    labelSkipHeight={12}\n    labelTextColor={{\n      from: 'color',\n      modifiers: [['darker', 1.6]],\n    }}\n    legends={[\n      {\n        dataFrom: 'keys',\n        anchor: 'bottom-right',\n        direction: 'column',\n        justify: false,\n        translateX: 120,\n        translateY: 0,\n        itemsSpacing: 2,\n        itemWidth: 100,\n        itemHeight: 20,\n        itemDirection: 'left-to-right',\n        itemOpacity: 0.85,\n        symbolSize: 20,\n        effects: [\n          {\n            on: 'hover',\n            style: {\n              itemOpacity: 1,\n            },\n          },\n        ],\n      },\n    ]}\n    role=\"application\"\n    ariaLabel=\"Nivo bar chart demo\"\n    barAriaLabel={function (e) {\n      return e.id + ': ' + e.formattedValue + ' in country: ' + e.indexValue\n    }}\n  />\n)\n\nconst MyResponsiveBar2 = ({ data }) => (\n  <ResponsiveBar\n    data={data}\n    keys={['survived', 'not survived']}\n    indexBy=\"age\"\n    margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n    padding={0.3}\n    valueScale={{ type: 'linear' }}\n    indexScale={{ type: 'band', round: true }}\n    colors={{ scheme: 'nivo' }}\n    defs={[\n      {\n        id: 'dots',\n        type: 'patternDots',\n        background: 'inherit',\n        color: '#38bcb2',\n        size: 4,\n        padding: 1,\n        stagger: true,\n      },\n      {\n        id: 'lines',\n        type: 'patternLines',\n        background: 'inherit',\n        color: '#eed312',\n        rotation: -45,\n        lineWidth: 6,\n        spacing: 10,\n      },\n    ]}\n    fill={[\n      {\n        match: {\n          id: 'asd',\n        },\n        id: 'dots',\n      },\n      {\n        match: {\n          id: 'not survived',\n        },\n        id: 'lines',\n      },\n    ]}\n    borderColor={{\n      from: 'color',\n      modifiers: [['darker', 1.6]],\n    }}\n    axisTop={null}\n    axisRight={null}\n    axisBottom={{\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'age',\n      legendPosition: 'middle',\n      legendOffset: 32,\n    }}\n    axisLeft={{\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'survivors',\n      legendPosition: 'middle',\n      legendOffset: -40,\n    }}\n    labelSkipWidth={12}\n    labelSkipHeight={12}\n    labelTextColor={{\n      from: 'color',\n      modifiers: [['darker', 1.6]],\n    }}\n    legends={[\n      {\n        dataFrom: 'keys',\n        anchor: 'bottom-right',\n        direction: 'column',\n        justify: false,\n        translateX: 120,\n        translateY: 0,\n        itemsSpacing: 2,\n        itemWidth: 100,\n        itemHeight: 20,\n        itemDirection: 'left-to-right',\n        itemOpacity: 0.85,\n        symbolSize: 20,\n        effects: [\n          {\n            on: 'hover',\n            style: {\n              itemOpacity: 1,\n            },\n          },\n        ],\n      },\n    ]}\n    role=\"application\"\n    ariaLabel=\"Nivo bar chart demo\"\n    barAriaLabel={function (e) {\n      return e.id + ': ' + e.formattedValue + ' in country: ' + e.indexValue\n    }}\n  />\n)\n\nMyResponsiveBar.propTypes = {\n  data: PropTypes.array.isRequired,\n}\n\nMyResponsiveBar2.propTypes = {\n  data: PropTypes.array.isRequired,\n}\n\nconst BarsNivo = () => {\n  const [viewInfo, setViewInfo] = useState('All')\n  const [viewInfo2, setViewInfo2] = useState('All')\n  return (\n    <>\n      <CCard>\n        <CCardHeader>\n          <CCol>\n            <h1>Survivor by Sex and Age</h1>\n          </CCol>\n          <CCol>\n            <CButtonGroup>\n              {['All', 'Male', 'Female'].map((value) => (\n                <CButton\n                  color=\"outline-secondary\"\n                  key={value}\n                  active={value === viewInfo}\n                  onClick={() => setViewInfo(value)}\n                >\n                  {value}\n                </CButton>\n              ))}\n            </CButtonGroup>\n          </CCol>\n        </CCardHeader>\n        <CCardBody style={{ height: '500px' }}>\n          <MyResponsiveBar\n            data={viewInfo === 'All' ? data : viewInfo === 'Male' ? dataByMale : dataByFemale}\n          />\n        </CCardBody>\n      </CCard>\n      <CCard style={{ marginTop: '40px' }}>\n        <CCardHeader>\n          <CCol>\n            <h1>Survivor by Ticket Class and Age</h1>\n          </CCol>\n          <CCol>\n            <CButtonGroup>\n              {['All', 'First Class', 'Second Class', 'Third Class'].map((value) => (\n                <CButton\n                  color=\"outline-secondary\"\n                  key={value}\n                  active={value === viewInfo2}\n                  onClick={() => setViewInfo2(value)}\n                >\n                  {value}\n                </CButton>\n              ))}\n            </CButtonGroup>\n          </CCol>\n        </CCardHeader>\n        <CCardBody style={{ height: '500px' }}>\n          <MyResponsiveBar\n            data={\n              viewInfo2 === 'All'\n                ? data\n                : viewInfo2 === 'First Class'\n                ? dataFirstClass\n                : viewInfo2 === 'Second Class'\n                ? dataSecondClass\n                : dataThirdClass\n            }\n          />\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default BarsNivo\n"],"names":["titanicDataClean","titanicData","map","pclass","age","survived","sex","not_survived","firstClass","secondClass","thirdClass","isMale","isFemale","titanicDataNull","filter","titanicDataChild","titanicDataYoung","titanicDataAdult","titanicDataElderly","titanicDataNullSurvived","titanicDataChildSurvived","titanicDataYoungSurvived","titanicDataAdultSurvived","titanicDataElderlySurvived","dataFull","data","length","dataByMale","dataByFemale","dataFirstClass","dataSecondClass","dataThirdClass","MyResponsiveBar","keys","indexBy","margin","top","right","bottom","left","padding","valueScale","type","indexScale","round","colors","scheme","defs","id","background","color","size","stagger","rotation","lineWidth","spacing","fill","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","role","ariaLabel","barAriaLabel","e","formattedValue","indexValue","useState","viewInfo","setViewInfo","viewInfo2","setViewInfo2","value","active","onClick","height","marginTop"],"sourceRoot":""}