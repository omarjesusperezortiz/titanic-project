{"version":3,"file":"static/js/129.fb709a90.chunk.js","mappings":"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","sources":["../node_modules/@nivo/marimekko/src/props.ts","../node_modules/@nivo/marimekko/src/types.ts","../node_modules/@nivo/marimekko/src/hooks.ts","../node_modules/@nivo/marimekko/src/Bar.tsx","../node_modules/@nivo/marimekko/src/Bars.tsx","../node_modules/@nivo/marimekko/src/BarTooltip.tsx","../node_modules/@nivo/marimekko/src/Marimekko.tsx","../node_modules/@nivo/marimekko/src/ResponsiveMarimekko.tsx","views/infographics/Marimekko.js"],"sourcesContent":["import { LayerId, Layout, OffsetId } from './types'\n\nexport const defaultProps = {\n    layout: 'vertical' as Layout,\n    offset: 'none' as OffsetId,\n    outerPadding: 0,\n    innerPadding: 3,\n\n    layers: ['grid', 'axes', 'bars', 'legends'] as LayerId[],\n\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from '@nivo/scales'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, ModernMotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    ModernMotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport { get } from 'lodash'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { createLinearScale, ScaleLinear } from '@nivo/scales'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        const scaleData = { all: [min, max], min, max }\n        const size = layout === 'vertical' ? height : width\n        const axis = layout === 'vertical' ? 'y' : 'x'\n        // here 'axis' determines whether the domain should be reversed or not\n        return createLinearScale({ type: 'linear', min, max }, scaleData, size, axis)\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n        const scaleData = { all: [0, totalValue], min: 0, max: totalValue }\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n        const size = layout === 'vertical' ? width - totalPadding : height - totalPadding\n        // here 'axis' means that the scale will be going forward, i.e. not reversed\n        return createLinearScale({ type: 'linear' }, scaleData, size, 'x')\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, MouseEvent, useCallback } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        event => showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? xScale : undefined}\n                yScale={enableGridY ? yScale : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import React, { useState } from 'react'\nimport { ResponsiveMarimekko } from '@nivo/marimekko'\nimport PropTypes from 'prop-types'\nimport { CCol, CCard, CCardHeader, CCardBody, CButtonGroup, CButton } from '@coreui/react'\nimport titanicData from '../../data/titanic'\n\nconst titanicDataRaw = titanicData\n\nconst titanicDataClean = titanicDataRaw.map(({ pclass, age, survived, sex }) => {\n  return {\n    pclass,\n    age,\n    survived,\n    sex,\n  }\n})\n\nconst survived = ({ survived }) => {\n  return survived === true\n}\nconst notSurvived = ({ survived }) => {\n  return survived === false\n}\nconst firstClass = ({ pclass }) => {\n  return pclass === 1\n}\nconst secondClass = ({ pclass }) => {\n  return pclass === 2\n}\nconst thirdClass = ({ pclass }) => {\n  return pclass === 3\n}\nconst isMale = ({ sex }) => {\n  return sex === 'male'\n}\nconst isFemale = ({ sex }) => {\n  return sex === 'female'\n}\n\nconst lessThanTen = ({ age }) => {\n  return age >= 0.1 && age < 10\n}\nconst betweenTenAndTwenty = ({ age }) => {\n  return age >= 10 && age < 20\n}\nconst betweenTwentyAndThirty = ({ age }) => {\n  return age >= 20 && age < 30\n}\nconst betweenThirtyAndForty = ({ age }) => {\n  return age >= 30 && age < 40\n}\nconst betweenFortyAndFifty = ({ age }) => {\n  return age >= 40 && age < 50\n}\nconst betweenFiftyAndSixty = ({ age }) => {\n  return age >= 50 && age < 60\n}\nconst betweenSixtyAndSeventy = ({ age }) => {\n  return age >= 60 && age < 70\n}\nconst betweenSeventyAndEighty = ({ age }) => {\n  return age >= 70 && age <= 80\n}\n\n//By Age\n\nconst titanicLessThanTen = titanicDataClean.filter(lessThanTen)\nconst titanicBetweenTenAndTwenty = titanicDataClean.filter(betweenTenAndTwenty)\nconst titanicBetweenTwentyAndThirty = titanicDataClean.filter(betweenTwentyAndThirty)\nconst titanicBetweenThirtyAndForty = titanicDataClean.filter(betweenThirtyAndForty)\nconst titanicBetweenFortyAndFifty = titanicDataClean.filter(betweenFortyAndFifty)\nconst titanicBetweenFiftyAndSixty = titanicDataClean.filter(betweenFiftyAndSixty)\nconst titanicBetweenSixtyAndSeventy = titanicDataClean.filter(betweenSixtyAndSeventy)\nconst titanicBetweenSeventyAndEighty = titanicDataClean.filter(betweenSeventyAndEighty)\n\nconst data = [\n  {\n    statement: '0 - 10',\n    participation: 10,\n    maleSurvived: titanicLessThanTen.filter(isMale).filter(survived).length,\n    femaleSurvived: titanicLessThanTen.filter(isFemale).filter(survived).length,\n    maleNotSurvived: titanicLessThanTen.filter(isMale).filter(notSurvived).length,\n    femaleNotSurvived: titanicLessThanTen.filter(isFemale).filter(notSurvived).length,\n  },\n  {\n    statement: '10 - 20',\n    participation: 10,\n    maleSurvived: titanicBetweenTenAndTwenty.filter(isMale).filter(survived).length,\n    femaleSurvived: titanicBetweenTenAndTwenty.filter(isFemale).filter(survived).length,\n    maleNotSurvived: titanicBetweenTenAndTwenty.filter(isMale).filter(notSurvived).length,\n    femaleNotSurvived: titanicBetweenTenAndTwenty.filter(isFemale).filter(notSurvived).length,\n  },\n  {\n    statement: '20 - 30',\n    participation: 10,\n    maleSurvived: titanicBetweenTwentyAndThirty.filter(isMale).filter(survived).length,\n    femaleSurvived: titanicBetweenTwentyAndThirty.filter(isFemale).filter(survived).length,\n    maleNotSurvived: titanicBetweenTwentyAndThirty.filter(isMale).filter(notSurvived).length,\n    femaleNotSurvived: titanicBetweenTwentyAndThirty.filter(isFemale).filter(notSurvived).length,\n  },\n  {\n    statement: '30 - 40',\n    participation: 10,\n    maleSurvived: titanicBetweenThirtyAndForty.filter(isMale).filter(survived).length,\n    femaleSurvived: titanicBetweenThirtyAndForty.filter(isFemale).filter(survived).length,\n    maleNotSurvived: titanicBetweenThirtyAndForty.filter(isMale).filter(notSurvived).length,\n    femaleNotSurvived: titanicBetweenThirtyAndForty.filter(isFemale).filter(notSurvived).length,\n  },\n  {\n    statement: '40 - 50',\n    participation: 10,\n    maleSurvived: titanicBetweenFortyAndFifty.filter(isMale).filter(survived).length,\n    femaleSurvived: titanicBetweenFortyAndFifty.filter(isFemale).filter(survived).length,\n    maleNotSurvived: titanicBetweenFortyAndFifty.filter(isMale).filter(notSurvived).length,\n    femaleNotSurvived: titanicBetweenFortyAndFifty.filter(isFemale).filter(notSurvived).length,\n  },\n  {\n    statement: '50 - 60',\n    participation: 10,\n    maleSurvived: titanicBetweenFiftyAndSixty.filter(isMale).filter(survived).length,\n    femaleSurvived: titanicBetweenFiftyAndSixty.filter(isFemale).filter(survived).length,\n    maleNotSurvived: titanicBetweenFiftyAndSixty.filter(isMale).filter(notSurvived).length,\n    femaleNotSurvived: titanicBetweenFiftyAndSixty.filter(isFemale).filter(notSurvived).length,\n  },\n  {\n    statement: '60 - 70',\n    participation: 10,\n    maleSurvived: titanicBetweenSixtyAndSeventy.filter(isMale).filter(survived).length,\n    femaleSurvived: titanicBetweenSixtyAndSeventy.filter(isFemale).filter(survived).length,\n    maleNotSurvived: titanicBetweenSixtyAndSeventy.filter(isMale).filter(notSurvived).length,\n    femaleNotSurvived: titanicBetweenSixtyAndSeventy.filter(isFemale).filter(notSurvived).length,\n  },\n  {\n    statement: '70 - 80',\n    participation: 10,\n    maleSurvived: titanicBetweenSeventyAndEighty.filter(isMale).filter(survived).length,\n    femaleSurvived: titanicBetweenSeventyAndEighty.filter(isFemale).filter(survived).length,\n    maleNotSurvived: titanicBetweenSeventyAndEighty.filter(isMale).filter(notSurvived).length,\n    femaleNotSurvived: titanicBetweenSeventyAndEighty.filter(isFemale).filter(notSurvived).length,\n  },\n]\nconst dataFull = [\n  {\n    statement: '0 - 10',\n    participation: 10,\n    maleSurvived: titanicLessThanTen.filter(isMale).filter(survived),\n    femaleSurvived: titanicLessThanTen.filter(isFemale).filter(survived),\n    maleNotSurvived: titanicLessThanTen.filter(isMale).filter(notSurvived),\n    femaleNotSurvived: titanicLessThanTen.filter(isFemale).filter(notSurvived),\n  },\n  {\n    statement: '10 - 20',\n    participation: 10,\n    maleSurvived: titanicBetweenTenAndTwenty.filter(isMale).filter(survived),\n    femaleSurvived: titanicBetweenTenAndTwenty.filter(isFemale).filter(survived),\n    maleNotSurvived: titanicBetweenTenAndTwenty.filter(isMale).filter(notSurvived),\n    femaleNotSurvived: titanicBetweenTenAndTwenty.filter(isFemale).filter(notSurvived),\n  },\n  {\n    statement: '20 - 30',\n    participation: 10,\n    maleSurvived: titanicBetweenTwentyAndThirty.filter(isMale).filter(survived),\n    femaleSurvived: titanicBetweenTwentyAndThirty.filter(isFemale).filter(survived),\n    maleNotSurvived: titanicBetweenTwentyAndThirty.filter(isMale).filter(notSurvived),\n    femaleNotSurvived: titanicBetweenTwentyAndThirty.filter(isFemale).filter(notSurvived),\n  },\n  {\n    statement: '30 - 40',\n    participation: 10,\n    maleSurvived: titanicBetweenThirtyAndForty.filter(isMale).filter(survived),\n    femaleSurvived: titanicBetweenThirtyAndForty.filter(isFemale).filter(survived),\n    maleNotSurvived: titanicBetweenThirtyAndForty.filter(isMale).filter(notSurvived),\n    femaleNotSurvived: titanicBetweenThirtyAndForty.filter(isFemale).filter(notSurvived),\n  },\n  {\n    statement: '40 - 50',\n    participation: 10,\n    maleSurvived: titanicBetweenFortyAndFifty.filter(isMale).filter(survived),\n    femaleSurvived: titanicBetweenFortyAndFifty.filter(isFemale).filter(survived),\n    maleNotSurvived: titanicBetweenFortyAndFifty.filter(isMale).filter(notSurvived),\n    femaleNotSurvived: titanicBetweenFortyAndFifty.filter(isFemale).filter(notSurvived),\n  },\n  {\n    statement: '50 - 60',\n    participation: 10,\n    maleSurvived: titanicBetweenFiftyAndSixty.filter(isMale).filter(survived),\n    femaleSurvived: titanicBetweenFiftyAndSixty.filter(isFemale).filter(survived),\n    maleNotSurvived: titanicBetweenFiftyAndSixty.filter(isMale).filter(notSurvived),\n    femaleNotSurvived: titanicBetweenFiftyAndSixty.filter(isFemale).filter(notSurvived),\n  },\n  {\n    statement: '60 - 70',\n    participation: 10,\n    maleSurvived: titanicBetweenSixtyAndSeventy.filter(isMale).filter(survived),\n    femaleSurvived: titanicBetweenSixtyAndSeventy.filter(isFemale).filter(survived),\n    maleNotSurvived: titanicBetweenSixtyAndSeventy.filter(isMale).filter(notSurvived),\n    femaleNotSurvived: titanicBetweenSixtyAndSeventy.filter(isFemale).filter(notSurvived),\n  },\n  {\n    statement: '70 - 80',\n    participation: 10,\n    maleSurvived: titanicBetweenSeventyAndEighty.filter(isMale).filter(survived),\n    femaleSurvived: titanicBetweenSeventyAndEighty.filter(isFemale).filter(survived),\n    maleNotSurvived: titanicBetweenSeventyAndEighty.filter(isMale).filter(notSurvived),\n    femaleNotSurvived: titanicBetweenSeventyAndEighty.filter(isFemale).filter(notSurvived),\n  },\n]\nconst dataFirstClass = dataFull.map(\n  ({ maleSurvived, maleNotSurvived, femaleSurvived, femaleNotSurvived, ...rest }) => {\n    return {\n      maleSurvived: maleSurvived.filter(firstClass).length,\n      maleNotSurvived: maleNotSurvived.filter(firstClass).length,\n      femaleSurvived: femaleSurvived.filter(firstClass).length,\n      femaleNotSurvived: femaleNotSurvived.filter(firstClass).length,\n      ...rest,\n    }\n  },\n)\nconst dataSecondClass = dataFull.map(\n  ({ maleSurvived, maleNotSurvived, femaleSurvived, femaleNotSurvived, ...rest }) => {\n    return {\n      maleSurvived: maleSurvived.filter(secondClass).length,\n      maleNotSurvived: maleNotSurvived.filter(secondClass).length,\n      femaleSurvived: femaleSurvived.filter(secondClass).length,\n      femaleNotSurvived: femaleNotSurvived.filter(secondClass).length,\n      ...rest,\n    }\n  },\n)\nconst dataThirdClass = dataFull.map(\n  ({ maleSurvived, maleNotSurvived, femaleSurvived, femaleNotSurvived, ...rest }) => {\n    return {\n      maleSurvived: maleSurvived.filter(thirdClass).length,\n      maleNotSurvived: maleNotSurvived.filter(thirdClass).length,\n      femaleSurvived: femaleSurvived.filter(thirdClass).length,\n      femaleNotSurvived: femaleNotSurvived.filter(thirdClass).length,\n      ...rest,\n    }\n  },\n)\n\nconst MyResponsiveMarimekko = ({ data }) => (\n  <ResponsiveMarimekko\n    data={data}\n    id=\"statement\"\n    value=\"participation\"\n    dimensions={[\n      {\n        id: 'female survived',\n        value: 'femaleSurvived',\n      },\n      {\n        id: 'female not survived',\n        value: 'femaleNotSurvived',\n      },\n      {\n        id: 'male survived',\n        value: 'maleSurvived',\n      },\n      {\n        id: 'male not survived',\n        value: 'maleNotSurvived',\n      },\n    ]}\n    innerPadding={5}\n    axisTop={null}\n    axisRight={{\n      orient: 'right',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: '',\n      legendOffset: 0,\n    }}\n    axisBottom={{\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'age',\n      legendOffset: 36,\n      legendPosition: 'middle',\n    }}\n    axisLeft={{\n      orient: 'left',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'total',\n      legendOffset: -40,\n      legendPosition: 'middle',\n    }}\n    margin={{ top: 40, right: 80, bottom: 100, left: 80 }}\n    colors={{ scheme: 'spectral' }}\n    borderWidth={3}\n    borderColor={{\n      from: 'color',\n      modifiers: [['darker', 0.2]],\n    }}\n    defs={[\n      {\n        id: 'lines',\n        type: 'patternLines',\n        background: 'rgba(0, 0, 0, 0)',\n        color: 'inherit',\n        rotation: -45,\n        lineWidth: 4,\n        spacing: 8,\n      },\n    ]}\n    fill={[\n      {\n        match: {\n          id: 'female not survived',\n        },\n        id: 'lines',\n      },\n      {\n        match: {\n          id: 'male not survived',\n        },\n        id: 'lines',\n      },\n    ]}\n    legends={[\n      {\n        anchor: 'bottom',\n        direction: 'row',\n        justify: false,\n        translateX: 0,\n        translateY: 80,\n        itemsSpacing: 0,\n        itemWidth: 140,\n        itemHeight: 18,\n        itemTextColor: '#999',\n        itemDirection: 'right-to-left',\n        itemOpacity: 1,\n        symbolSize: 18,\n        symbolShape: 'square',\n        effects: [\n          {\n            on: 'hover',\n            style: {\n              itemTextColor: '#000',\n            },\n          },\n        ],\n      },\n    ]}\n  />\n)\n\nMyResponsiveMarimekko.propTypes = {\n  data: PropTypes.array.isRequired,\n}\n\nconst MarimekkoNivo = () => {\n  const [viewInfo, setViewInfo] = useState('All')\n  return (\n    <>\n      <CCard>\n        <CCardHeader>\n          <CCol>\n            <h1>Survivors by Sex, Age and Class</h1>\n          </CCol>\n          <CCol>\n            <CButtonGroup>\n              {['All', 'First Class', 'Second Class', 'Third Class'].map((value) => (\n                <CButton\n                  color=\"outline-secondary\"\n                  key={value}\n                  active={value === viewInfo}\n                  onClick={() => setViewInfo(value)}\n                >\n                  {value}\n                </CButton>\n              ))}\n            </CButtonGroup>\n          </CCol>\n        </CCardHeader>\n        <CCardBody style={{ height: '500px' }}>\n          <MyResponsiveMarimekko\n            data={\n              viewInfo === 'All'\n                ? data\n                : viewInfo === 'First Class'\n                ? dataFirstClass\n                : viewInfo === 'Second Class'\n                ? dataSecondClass\n                : dataThirdClass\n            }\n          />\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default MarimekkoNivo\n"],"names":["defaultProps","layout","offset","outerPadding","innerPadding","layers","enableGridX","enableGridY","colors","scheme","borderWidth","borderColor","from","modifiers","isInteractive","animate","motionConfig","offsetById","expand","stackOffsetExpand","diverging","stackOffsetDiverging","none","stackOffsetNone","silouhette","stackOffsetSilhouette","wiggle","stackOffsetWiggle","useStack","dimensionIds","dimensions","useMemo","offsetFunction","d3Stack","keys","value","datum","key","useMarimekko","n","data","id","valueFormat","rawDimensions","width","height","forEach","push","dimension","_get","stack","stacked","allValues","min","Math","max","normalizedData","getId","getValue","normalized","index","datumId","datumValue","thicknessScale","totalValue","reduce","acc","scaleData","all","totalPadding","length","createLinearScale","type","dimensionsScale","computedData","getColor","useOrdinalColorScale","formatValue","useValueFormatter","position","thickness","computedDatum","x","y","allPositions","totalSize","dimensionId","find","dimensionPoint","dimensionDatum","formattedValue","color","position0","position1","bars","theme","useTheme","getBorderColor","useInheritedColor","Bar","i","bar","animatedProps","tooltip","onClick","onMouseEnter","onMouseMove","onMouseLeave","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","_jsx","animated","rect","to","fill","stroke","strokeWidth","undefined","Bars","useMotionConfig","springConfig","config","transition","useTransition","initial","opacity","enter","update","leave","immediate","style","BarTooltip","BasicTooltip","enableChip","InnerMarimekko","partialMargin","margin","axisTop","axisRight","axisBottom","axisLeft","gridXValues","gridYValues","defs","N","U","legends","role","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","layerById","grid","axes","boundDefs","bindDefs","includes","xScale","yScale","Grid","xValues","yValues","Axes","top","right","bottom","left","legendData","label","map","legend","BoxLegendSvg","containerWidth","containerHeight","layerContext","SvgWrapper","layer","Fragment","Marimekko","otherProps","Container","ResponsiveMarimekko","props","ResponsiveWrapper","titanicDataClean","titanicData","pclass","age","survived","sex","notSurvived","firstClass","secondClass","thirdClass","isMale","isFemale","titanicLessThanTen","filter","titanicBetweenTenAndTwenty","titanicBetweenTwentyAndThirty","titanicBetweenThirtyAndForty","titanicBetweenFortyAndFifty","titanicBetweenFiftyAndSixty","titanicBetweenSixtyAndSeventy","titanicBetweenSeventyAndEighty","statement","participation","maleSurvived","femaleSurvived","maleNotSurvived","femaleNotSurvived","dataFull","dataFirstClass","rest","dataSecondClass","dataThirdClass","MyResponsiveMarimekko","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","background","rotation","lineWidth","spacing","match","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemTextColor","itemDirection","itemOpacity","symbolSize","symbolShape","effects","on","useState","viewInfo","setViewInfo","active"],"sourceRoot":""}