{"version":3,"file":"static/js/425.ceb77052.chunk.js","mappings":"6rBAGO,MAAMA,EAAiB,SAAAC,GAAA,IAAcC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,YACxCC,GAAmBC,EAAAA,EAAAA,IAAe,CACpCC,KAAMJ,EACNC,YAAAA,EACAI,YAAa,YAAAC,MAAQ,CACjBC,EAAGD,EAAIC,EAAID,EAAIE,MAAQ,EACvBC,EAAGH,EAAIG,EAAIH,EAAII,OAAS,IAE5BC,cAAe,gBAAGD,EAAAA,EAAAA,OAAQF,EAAAA,EAAAA,MAAAA,MAAa,CACnCA,MAAAA,EACAE,OAAAA,EACAE,KAAMC,KAAKC,IAAIN,EAAOE,GAAAA,IAAAA,OAK1BK,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,CAAAA,SACKb,EAAiBc,KAAI,SAACC,EAAYC,GAAAA,OAC/BH,EAAAA,EAAAA,KAACI,EAAAA,GAAAA,EAAAA,CAAAA,EAAuBF,GAAPC,EAAAA,KAAAA,ECXpBE,EAAa,SAAArB,GAAA,IAAGS,EAAAA,EAAAA,MAAOE,EAAAA,EAAAA,OAAQW,EAAAA,EAAAA,QAASC,EAAAA,EAAAA,YAAAA,OACjDP,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,CAAAA,SACKM,EAAQL,KAAI,WAAiBE,GAAAA,IAAAA,EAAfK,EAAAA,EAAAA,GAAQnB,EAAAA,EAAAA,GAAAA,OACnBW,EAAAA,EAAAA,KAACS,EAAAA,GAAAA,EAAAA,CAAAA,EAEOD,EAAAA,CACJE,eAAgBjB,EAChBkB,gBAAiBhB,EACjBN,KAAAA,OAAAA,EAAMmB,EAAOnB,MAAAA,EAAQA,EACrBkB,YACIC,EAAOD,aAAmC,SAApBC,EAAOI,SAAsBL,OAAAA,IANlDJ,EAAAA,KAAAA,EAAAA,EAAAA,CAAAA,QCqGAU,EAAAA,CAAAA,QAAAA,SC7GRC,EAAe,CACxBC,QAAS,KACTC,KAAM,CAAC,SAEPC,UAAW,UACXC,OAAQ,WACRC,SAAS,EAETC,SAAU,OACVC,SAAU,OAEVC,WAAY,CAAEC,KAAM,UACpBC,WAAY,CAAED,KAAM,OAAQE,OAAO,GAEnCC,QAAS,GACTC,aAAc,EAEdC,WAAY,CAAC,EACbC,SAAU,CAAC,EACXC,aAAa,EACbC,aAAa,EAEbC,aAAa,EACbnB,MAAO,iBACPoB,eAAgB,EAChBC,gBAAiB,EACjBC,eAAgB,CAAEC,KAAM,QAASC,MAAO,oBAExCC,QAAS,KACTC,OAAQ,CAAEC,OAAQ,QAElBC,aAAc,EACdC,YAAa,EACbC,YAAa,CAAEP,KAAM,SAErBQ,eAAe,EACfC,QCvCsB,gBAAcC,EAAAA,EAAAA,MAAOjC,EAAAA,EAAAA,MAAUxB,EAAAA,EAAAA,EAAAA,GAAAA,OAC9CW,EAAAA,EAAAA,KAAC+C,EAAAA,GAAAA,CAAaC,GAAInC,EAAOoC,MAAO5D,EAAK6D,eAAgBC,YAAAA,EAAkBL,MAAOA,GAAAA,EDuCrFM,aAAc,SAAWC,GAAAA,OAAsCA,EAAML,GAAAA,MAAQK,EAAMC,UAAAA,EAEnFhD,QAAS,GACTiD,iBAAkB,GAClBrE,YAAa,GACbsE,QAAS,IAGAC,EAAAA,EAAAA,CAAAA,EACN3C,EAAAA,CACH4C,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,UAAW,UAAW,eACvDC,aDhDmB,kBAAAxD,EAAAA,EACnBZ,IAAOF,EAAAA,EAAAA,KAASE,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAEhBqE,MACIjB,EAAAA,EAAAA,YACAG,EAAAA,EAAAA,MACAnD,EAAAA,EAAAA,OACAkE,EAAAA,EAAAA,WACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,UACAxE,EAAAA,EAAAA,MAGJgD,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YAEA7B,EAAAA,EAAAA,MACAqD,EAAAA,EAAAA,kBAEAtB,EAAAA,EAAAA,cACAuB,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,aAEAxB,EAAAA,EAAAA,QAEAyB,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,gBAEMpC,GAAQqC,EAAAA,EAAAA,MAAAA,GAC+CC,EAAAA,EAAAA,MAArDC,EAAAA,EAAAA,qBAAsBC,EAAAA,EAAAA,cAAeC,EAAAA,EAAAA,YAEvCC,GAAgBC,EAAAA,EAAAA,UAClB,kBAAM,kBAAMC,EAAAA,EAAAA,eAAcpC,EAAAA,EAAAA,CAAAA,EAActD,EAAQF,GAAAA,CAAAA,GAChD,CAACwD,EAAStD,EAAKF,IAGb6F,GAAcC,EAAAA,EAAAA,cAChB,SAACC,GAAAA,MACGjB,GAAAA,EAAAA,EAAAA,CAAYrB,MAAOvD,EAAIuD,OAAUzD,GAAQ+F,EAAAA,GAE7C,CAAC7F,EAAKF,EAAM8E,IAEVkB,GAAgBF,EAAAA,EAAAA,cAClB,SAACC,GAAAA,OAAsCR,EAAqBG,IAAiBK,EAAAA,GAC7E,CAACR,EAAsBG,IAErBO,GAAmBH,EAAAA,EAAAA,cACrB,SAACC,GAAAA,MACGhB,GAAAA,EAAe/E,EAAM+F,GACrBR,EAAqBG,IAAiBK,EAAAA,GAE1C,CAAC/F,EAAM+E,EAAcQ,EAAsBG,IAEzCQ,GAAmBJ,EAAAA,EAAAA,cACrB,SAACC,GAAAA,MACGf,GAAAA,EAAehF,EAAM+F,GACrBN,GAAAA,GAEJ,CAACzF,EAAMyF,EAAaT,IAIlBmB,GAAcL,EAAAA,EAAAA,cAAY,WAC5BN,EAAcE,IAAiB,CAACxF,EAAIkG,KAAOlG,EAAIE,MAAQ,EAAGF,EAAImG,MAAAA,GAC/D,CAACb,EAAeE,EAAexF,IAC5BoG,GAAaR,EAAAA,EAAAA,cAAY,WAC3BL,GAAAA,GACD,CAACA,IAAAA,OAGAc,EAAAA,EAAAA,MAACC,EAAAA,SAAAA,EAAUC,CAAC7B,UAAWA,EAAAA,SAAAA,EACnBjE,EAAAA,EAAAA,KAAC6F,EAAAA,SAAAA,KAAaE,CACVtG,OAAOuG,EAAAA,EAAAA,IAAGvG,GAAO,YAAAwD,OAASnD,KAAKC,IAAIkD,EAAO,MAC1CtD,QAAQqG,EAAAA,EAAAA,IAAGrG,GAAQ,YAAAsD,OAASnD,KAAKC,IAAIkD,EAAO,MAC5CgD,GAAIxD,EACJyD,GAAIzD,EACJ0D,KAAAA,OAAAA,EAAM9G,EAAK8G,MAAAA,EAAQrD,EACnBsD,YAAa1D,EACb2D,OAAQ1D,EACR2D,UAAWhC,EACXiC,SAAUjC,EAAc,OAAI,EAAAkC,aAChBjC,EAAYA,EAAUlF,QAAAA,EAAQmH,kBACzBhC,EAAiBA,EAAenF,QAAAA,EAAQmH,mBACvC/B,EAAkBA,EAAgBpF,QAAAA,EACpD+E,aAAcxB,EAAgB0C,OAAAA,EAC9BmB,YAAa7D,EAAgByC,OAAAA,EAC7BhB,aAAczB,EAAgB2C,OAAAA,EAC9BpB,QAASvB,EAAgBsC,OAAAA,EACzBwB,QAAS9D,GAAiB0B,EAAckB,OAAAA,EACxCmB,OAAQ/D,GAAiB0B,EAAcqB,OAAAA,IAE1CzB,IACGlE,EAAAA,EAAAA,KAAC6F,EAAAA,SAAAA,KAAae,CACVpH,EAAGuE,EACHrE,EAAGsE,EACH6C,WAAW,SACXC,iBAAiB,UACjBC,YAAajD,EACbF,MAAAA,EAAAA,CAAAA,EACOvB,EAAM2E,OAAOJ,KAAAA,CAChBK,cAAe,OACfd,KAAMtC,IAAAA,SAGThD,MAAAA,EC3DjBqG,KAAM,GACNf,KAAM,GAENgB,SAAS,EACTC,aAAc,UAEdC,KAAM,MACN/C,aAAa,IAGJgD,EAAAA,EAAAA,CAAAA,EACNxG,EAAAA,CACH4C,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,UAAW,eAE5C6D,WAA8B,oBAAXC,QAAAA,OAAAA,EAAyBA,OAAOC,kBAAAA,EAAwB,IEjElEC,EAAgB,SACzBrI,EACAsI,EACAjG,EACAF,EACA3B,EACA+H,GAAAA,OAGIC,EAAAA,EAAAA,IACIrG,EACA,CAAEsG,IAAKzI,EAAKY,IAAI0H,GAAWI,IAAK,EAAGhI,IAAK,GACxCF,EACA+H,GAENlG,QAAQA,EAAAA,EAMDsG,EAAgB,SAAW3I,EAAkB2B,GAAAA,OACtD3B,EAAKY,KACD,YAAAgI,OAAAA,EAAAA,CAAAA,EAEWjH,EAAKkH,QAAgC,SAACC,EAAKC,GAAAA,OAC1CD,EAAIC,GAAO,KACJD,CAAAA,GACR,CAAC,GACDF,EAAAA,GAAAA,EAINI,EAAmB,SAA2ChJ,GAAAA,OACvEiJ,OAAOtH,KAAK3B,GAAM6I,QAAgC,SAACC,EAAKC,GAAAA,OAChD/I,EAAK+I,KACLD,EAAIC,GAAO/I,EAAK+I,IAEbD,CAAAA,GACR,CAAC,EAAD,EAEMI,EAAc,SAAItF,GAAAA,MAAa,CAACA,EAAOuF,OAAOvF,GAAAA,EAAAA,EAAAA,CAAAA,SAAAA,WAAAA,WAAAA,UAAAA,QAAAA,SAAAA,UAAAA,eAAAA,aAAAA,aAAAA,aC3BrDwF,EAAK,SAACxF,EAAeyF,GAAAA,OAAkBzF,EAAQyF,CAAAA,EAC/CC,EAAK,SAAC1F,EAAeyF,GAAAA,OAAkBzF,EAAQyF,CAAAA,EAE/CE,EAAQ,SAACC,EAAeC,GAAAA,OAC1BC,MAAM3G,KAAK,IAAI4G,OAAOF,EAAMD,IAAQ,SAACI,EAAGC,GAAAA,OAAUL,EAAQK,CAAAA,GAAAA,EAExDC,EAAc,SAAClG,GAAAA,OAAmBwF,EAAGxF,EAAO,GAAK,EAAIA,CAAAA,EAMrDmG,EAA8B,SAAApK,EAahCqK,EACAlI,EACAmI,GAAAA,IAbIjK,EAAAA,EAAAA,KACAkK,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,SACA7B,EAAAA,EAAAA,SACA8B,EAAAA,EAAAA,gBAAAA,EAAAA,EACA9H,aAAAA,OAAAA,IAAAA,EAAe,IACfX,EAAAA,EAAAA,KACA0I,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAMEC,EAAU1I,EAAUwH,EAAKF,EAGzBqB,EAAczK,EAAKY,IAAIoI,GAEvBpJ,EAAqC,UAC3C+B,EAAK+I,SAAQ,SAAC3B,EAAKjI,GAAAA,OACfyI,EAAM,EAAGc,EAAOM,SAASC,QAAQF,SAAQ,YAAAb,IAAAA,EAN/BgB,EAAAA,EAAAA,EAOoB3B,EAAYlJ,EAAK6J,GAAOd,IAA3C+B,EAAAA,EAAAA,GAAUlH,EAAAA,EAAAA,GACXK,EAAaqE,EAAStI,EAAK6J,IAC3B1J,GAAAA,OAAAA,EAAKkK,EAAOpG,IAAAA,EAAe,GAAK+F,EAAWlJ,EAAIwB,EAAexB,EAC9DT,EAVemK,EAAfK,EAUSjH,EAViB,GAAK,OAAL,EAAK0G,EAAOO,IAAAA,EAAM,EAAIZ,EAWhDc,EAVI,SAACF,EAAWxK,GAAAA,IAAAA,EAAAA,OAAemK,EAAQK,EAAG,GAAKZ,EAAO5J,GAAAA,OAAAA,EAAKiK,EAAOO,IAAAA,EAAM,GAAKZ,CAAAA,CAAzE,CAUkBrG,EAAOvD,GAC7B2K,EAAmC,CACrCrH,GAAIoF,EACJnF,MAAoB,OAAbkH,EAAoBA,EAAWlH,EACtCC,eAAgBqG,EAAYtG,GAC5BqH,QAAQ,EACRpB,MAAAA,EACA5F,WAAAA,EACAjE,KAAMyK,EAAYZ,IAGtBjK,EAAKsL,KAAK,CACNnC,IAAQA,EAAAA,IAAOiC,EAAQ/G,WACvB4F,MAAOjK,EAAKgL,OACZ5K,KAAMgL,EACN7K,EAAAA,EACAE,EAAAA,EACA+F,KAAMmE,EAAOY,KAAOhL,EACpBkG,KAAMkE,EAAOa,IAAM/K,EACnBD,MAAO4J,EACP1J,OAAQyK,EACRtH,MAAO0G,EAASa,GAChBxJ,MAAO4I,EAAgBY,IAAAA,GAAAA,IAK5BpL,CAAAA,EAMLyL,EAAgC,SAAA1L,EAalCoL,EACAjJ,EACAwJ,GAAAA,IAbItL,EAAAA,EAAAA,KACAkK,EAAAA,EAAAA,YACA5B,EAAAA,EAAAA,SACA6B,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,gBACAzI,EAAAA,EAAAA,KAAAA,EAAAA,EACAW,aAAAA,OAAAA,IAAAA,EAAe,IACf+H,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAMEC,EAAU1I,EAAUwH,EAAKF,EAGzBqB,EAAczK,EAAKY,IAAIoI,GAEvBpJ,EAAqC,UAC3C+B,EAAK+I,SAAQ,SAAC3B,EAAKjI,GAAAA,OACfyI,EAAM,EAAGe,EAAOK,SAASC,QAAQF,SAAQ,YAAAb,IAAAA,EAN/BgB,EAAAA,EAAAA,EAOoB3B,EAAYlJ,EAAK6J,GAAOd,IAA3C+B,EAAAA,EAAAA,GAAUlH,EAAAA,EAAAA,GACXK,EAAaqE,EAAStI,EAAK6J,IAC3B1J,EATeqK,EAAfK,EASSjH,EATiB,GAAK0H,EAAAA,OAAAA,EAAOjB,EAAOQ,IAAAA,EAAM,EAUnDxK,GAAAA,OAAAA,EAAKiK,EAAOrG,IAAAA,EAAe,GAAK8G,EAAYjK,EAAIwB,EAAexB,EAC/DkJ,EAVG,SAACa,EAAW1K,GAAAA,IAAAA,EAAAA,OAAeqK,EAAQK,EAAG,IAAM,OAAN,EAAMR,EAAOQ,IAAAA,EAAM,GAAKS,EAAOA,EAAOnL,CAAAA,CAA5E,CAUiByD,EAAOzD,GAC3B6K,EAAmC,CACrCrH,GAAIoF,EACJnF,MAAoB,OAAbkH,EAAoBA,EAAWlH,EACtCC,eAAgBqG,EAAYtG,GAC5BqH,QAAQ,EACRpB,MAAAA,EACA5F,WAAAA,EACAjE,KAAMyK,EAAYZ,IAGtBjK,EAAKsL,KAAK,CACNnC,IAAQA,EAAAA,IAAOiC,EAAQ/G,WACvB4F,MAAOjK,EAAKgL,OACZ5K,KAAMgL,EACN7K,EAAAA,EACAE,EAAAA,EACA+F,KAAMmE,EAAOY,KAAOhL,EACpBkG,KAAMkE,EAAOa,IAAM/K,EACnBD,MAAO4J,EACP1J,OAAQyK,EACRtH,MAAO0G,EAASa,GAChBxJ,MAAO4I,EAAgBY,IAAAA,GAAAA,IAK5BpL,CAAAA,EAME2L,EAAsB,SAAA5L,GAAA,MAjIViE,EAkIrB/B,EAAAA,EAAAA,OACAE,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,SACAF,EAAAA,EAAAA,QACA1B,EAAAA,EAAAA,MACAE,EAAAA,EAAAA,OAAAA,EAAAA,EACA+B,QAAAA,OAAAA,IAAAA,EAAU,IAAAmJ,EAAAA,EACVlJ,aAAAA,OAAAA,IAAAA,EAAe,IACfL,EAAAA,EAAAA,WACYwJ,EAAAA,EAAZtJ,WAAAA,EAAAA,EACAuJ,UAAAA,OAAAA,IAAAA,EAAY,KACTC,EAAAA,EAAAA,EAAAA,GAuBGhK,EAAOgK,EAAMhK,KAAKiK,QAAO,YAAA7C,OAAQ2C,EAAUG,SAAS9C,EAAAA,IACpD/I,EAAO2I,EAAcgD,EAAM3L,KAAM2B,GAAAA,EAExB,aAAXE,EAAyB,CAAC,IAAK,IAAKzB,GAAoB,CAAC,IAAK,IAAKE,GADhEiI,EAAAA,EAAAA,GAAMuD,EAAAA,EAAAA,GAAWtL,EAAAA,EAAAA,GAElB2B,EAAakG,EACfrI,EACA2L,EAAMrD,SACNjG,EACAoJ,EACAjL,EACAsL,GAGEC,EAAAA,EAAAA,CACFrL,IAAKsB,EACL0G,IAAK3G,EACLD,QAAAA,GACGG,GAGD+J,EAA6B,SAAlBD,EAAUrD,IAAiBoB,EAAc,SAAClG,GAAAA,OAAkBA,CAAAA,EAEvEqI,EAASjM,EACV6I,QAAiB,SAACC,EAAKoD,GAAAA,MAAAA,GAAAA,OAAcpD,EAAQnH,EAAKf,KAAI,YAAAuL,OAAKD,EAAMC,EAAAA,IAAAA,GAAgB,IACjFP,OAAOQ,SACN1D,EAAMsD,EAASvL,KAAKiI,IAAAA,MAALjI,KAAYwL,IAC3BvL,GA9LekD,EA8LOnD,KAAKC,IAAAA,MAALD,KAAYwL,GA9LAI,SAASzI,GAASA,EAAQ,GAgM5D0I,GAAQ9D,EAAAA,EAAAA,IACVuD,EACA,CAAEtD,IAAKwD,EAAQvD,IAAAA,EAAKhI,IAAAA,GACX,MAAT6H,EAAenI,EAAQE,EACvBiI,GAAAA,EAGgC,aAAX1G,EAAwB,CAACM,EAAYmK,GAAS,CAACA,EAAOnK,GAAxEkI,EAAAA,EAAAA,GAAQC,EAAAA,EAAAA,GAETiC,GAAapK,EAAWoK,YAAcjK,GAAgBX,EAAKiJ,OAAS,IAAMjJ,EAAKiJ,OAC/E4B,EAAS,CAAC,EAAD,GACNb,EAAAA,CAAO3L,KAAAA,EAAM2B,KAAAA,EAAMW,aAAAA,EAAc+H,OAAAA,EAAQC,OAAAA,IAC9CiC,EACAR,EAAUjK,QAAAA,OAAAA,EACVwK,EAAM,MAAM,SAUT,CAAEjC,OAAAA,EAAQC,OAAAA,EAAQ1K,KANrB2M,EAAY,EACK,aAAX1K,EACIkI,EAAAA,WAAAA,EAA+ByC,GAC/BnB,EAAAA,WAAAA,EAAiCmB,GACrC,KAAAC,EAAAA,CAAAA,OAAAA,SAAAA,WAAAA,WAAAA,UAAAA,QAAAA,SAAAA,UAAAA,aAAAA,aAAAA,aC3NRC,EAAc,SAAdA,EAAkBC,GAAAA,IAAAA,EAAAA,OACpBA,EAAIC,KAAKlD,MAAMmD,SAAWH,GAAAA,EAAa,IAAWI,OAAAA,MAAAA,EAAUH,IAASA,CAAAA,EAQnEI,EAA8B,SAAApN,EAYhCqK,EACAlI,GAAAA,IAXIoI,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,SACA7B,EAAAA,EAAAA,SACA8B,EAAAA,EAAAA,gBACA9H,EAAAA,EAAAA,aACA0K,EAAAA,EAAAA,YACA3C,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAQE3K,EAAqC,UAC3CoN,EAAYtC,SAAQ,YAAAuC,OAChB5C,EAAOM,SAASD,SAAQ,SAACb,EAAO/I,GAAAA,IAAAA,EAAAA,EACtB+J,EAAIoC,EAAgBnM,GACpBX,EAAAA,OAAAA,EAAIkK,EAAO/B,EAASuC,EAAE7K,QAAAA,EAAU,EAChCK,GAAAA,OAAAA,EARD,SAACwK,GAAAA,OAA4BP,EAAOO,EAAE/I,EAAU,EAAI,IAApD,CAQW+I,IAAAA,EAAM,GAAoB,GAAfvI,EACrByI,EARI,SAACF,EAAyBxK,GAAAA,IAAAA,EAAAA,OAAAA,OAAAA,EAAeiK,EAAOO,EAAE/I,EAAU,EAAI,OAAO,GAAKzB,CAAAA,CAA5E,CAQkBwK,EAAGxK,GAAKiC,EAAAA,EACV4G,EAAY2B,EAAE7K,KAAKiN,EAAgBlE,MAAtD+B,EAAAA,EAAAA,GAAUlH,EAAAA,EAAAA,GAEXoH,EAAmC,CACrCrH,GAAIsJ,EAAgBlE,IACpBnF,MAAoB,OAAbkH,EAAoBA,EAAWlH,EACtCC,eAAgBqG,EAAYtG,GAC5BqH,QAAQ,EACRpB,MAAO/I,EACPmD,WAAY4F,EACZ7J,KAAMgJ,EAAiB6B,EAAE7K,OAG7BJ,EAAKsL,KAAK,CACNnC,IAAQkE,EAAgBlE,IAAAA,IAAOc,EAC/BA,MAAOjK,EAAKgL,OACZ5K,KAAMgL,EACN7K,EAAAA,EACAE,EAAAA,EACA+F,KAAMmE,EAAOY,KAAOhL,EACpBkG,KAAMkE,EAAOa,IAAM/K,EACnBD,MAAO4J,EACP1J,OAAQyK,EACRtH,MAAO0G,EAASa,GAChBxJ,MAAO4I,EAAgBY,IAAAA,GAAAA,IAK5BpL,CAAAA,EAMLsN,EAAgC,SAAAvN,EAYlCoL,EACAjJ,GAAAA,IAXIoI,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,SACA7B,EAAAA,EAAAA,SACA8B,EAAAA,EAAAA,gBACA9H,EAAAA,EAAAA,aACA0K,EAAAA,EAAAA,YACA3C,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAQE3K,EAAqC,UAC3CoN,EAAYtC,SAAQ,YAAAuC,OAChB3C,EAAOK,SAASD,SAAQ,SAACb,EAAO/I,GAAAA,IAAAA,EAAAA,EACtB+J,EAAIoC,EAAgBnM,GACpBT,EAAAA,OAAAA,EAAIiK,EAAOhC,EAASuC,EAAE7K,QAAAA,EAAU,EAChCG,GAAAA,OAAAA,EARD,SAAC0K,GAAAA,OAA4BR,EAAOQ,EAAE/I,EAAU,EAAI,IAApD,CAQW+I,IAAAA,EAAM,GAAoB,GAAfvI,EACrB0H,EARG,SAACa,EAAyB1K,GAAAA,IAAAA,EAAAA,OAAAA,OAAAA,EAAekK,EAAOQ,EAAE/I,EAAU,EAAI,OAAO,GAAK3B,CAAAA,CAA5E,CAQiB0K,EAAG1K,GAAKmC,EAAAA,EACR4G,EAAY2B,EAAE7K,KAAKiN,EAAgBlE,MAAtD+B,EAAAA,EAAAA,GAAUlH,EAAAA,EAAAA,GAEXoH,EAAmC,CACrCrH,GAAIsJ,EAAgBlE,IACpBnF,MAAoB,OAAbkH,EAAoBA,EAAWlH,EACtCC,eAAgBqG,EAAYtG,GAC5BqH,QAAQ,EACRpB,MAAO/I,EACPmD,WAAY4F,EACZ7J,KAAMgJ,EAAiB6B,EAAE7K,OAG7BJ,EAAKsL,KAAK,CACNnC,IAAQkE,EAAgBlE,IAAAA,IAAOc,EAC/BA,MAAOjK,EAAKgL,OACZ5K,KAAMgL,EACN7K,EAAAA,EACAE,EAAAA,EACA+F,KAAMmE,EAAOY,KAAOhL,EACpBkG,KAAMkE,EAAOa,IAAM/K,EACnBD,MAAO4J,EACP1J,OAAQyK,EACRtH,MAAO0G,EAASa,GAChBxJ,MAAO4I,EAAgBY,IAAAA,GAAAA,IAK5BpL,CAAAA,EAMEuN,EAAsB,SAAAxN,GAAA,IA5HTyN,EA6HtBpN,EAAAA,EAAAA,KACA6B,EAAAA,EAAAA,OACAE,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,SACAF,EAAAA,EAAAA,QACA1B,EAAAA,EAAAA,MACAE,EAAAA,EAAAA,OAAAA,EAAAA,EACA+B,QAAAA,OAAAA,IAAAA,EAAU,IACVJ,EAAAA,EAAAA,WACYwJ,EAAAA,EAAZtJ,WAAAA,EAAAA,EACAuJ,UAAAA,OAAAA,IAAAA,EAAY,KACTC,EAAAA,EAAAA,EAAAA,GAuBGhK,EAAOgK,EAAMhK,KAAKiK,QAAO,YAAA7C,OAAQ2C,EAAUG,SAAS9C,EAAAA,IACpDiE,GAAcK,EAAAA,EAAAA,KAA0B1L,KAAKA,GAAM2L,OAAOC,EAAAA,EAA5CF,CAChB1E,EAAc3I,EAAM2B,IAAAA,EAIT,aAAXE,EAAyB,CAAC,IAAK,IAAKzB,GAAoB,CAAC,IAAK,IAAKE,GADhEiI,EAAAA,EAAAA,GAAMuD,EAAAA,EAAAA,GAAWtL,EAAAA,EAAAA,GAElB2B,EAAakG,EACfrI,EACA2L,EAAMrD,SACNjG,EACAoJ,EACAjL,EACAsL,GAGEC,EAAAA,EAAAA,CACFrL,IAAKsB,EACL0G,IAAK3G,EACLD,QAAAA,GACGG,GAGDgK,GAtLgBmB,EAuLlBV,EAAYM,GAtLP,QAuLL/K,EAAWC,KAvLEkL,EAAMxB,QAAO,YAAA4B,OAAe,IAARA,CAAAA,IAAaJ,GAyL5C1E,EAAMjI,KAAKiI,IAAAA,MAALjI,KAAYwL,GAClBvL,EAAMD,KAAKC,IAAAA,MAALD,KAAYwL,GAElBK,GAAQ9D,EAAAA,EAAAA,IACVuD,EACA,CAAEtD,IAAKwD,EAAQvD,IAAAA,EAAKhI,IAAAA,GACX,MAAT6H,EAAenI,EAAQE,EACvBiI,GAAAA,EAGgC,aAAX1G,EAAwB,CAACM,EAAYmK,GAAS,CAACA,EAAOnK,GAAxEkI,EAAAA,EAAAA,GAAQC,EAAAA,EAAAA,GAEThI,EAAeqJ,EAAMrJ,aAAe,EAAIqJ,EAAMrJ,aAAe,EAC7DiK,EAAYpK,EAAWoK,YACvBC,EAAS,CAAC,EAAD,GACNb,EAAAA,CAAOrJ,aAAAA,EAAc0K,YAAAA,EAAa3C,OAAAA,EAAQC,OAAAA,IAC/CiC,EACAR,EAAUjK,SAAAA,MAUP,CAAEuI,OAAAA,EAAQC,OAAAA,EAAQ1K,KANrB2M,EAAY,EACK,aAAX1K,EACIkL,EAAAA,WAAAA,EAA+BP,GAC/BU,EAAAA,WAAAA,EAAiCV,GACrC,KC3KDiB,EAAgB,SAAA9N,GAAA,IACzBC,EAAAA,EAAAA,KACA8N,EAAAA,EAAAA,UACA3K,EAAAA,EAAAA,KACAnB,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,OACA8L,EAAAA,EAAAA,YACA7L,EAAAA,EAAAA,QAOM8L,GAAiBC,EAAAA,EAAAA,IAACA,MACpBF,EAAAA,EAAyB,YAAT5K,EAAqB,aAAe,YAG3C,YAATA,EAxC+B,SACnCnD,EACAiC,EACA+L,GAAAA,IAEM5N,EAAO8N,IACTlO,EAAKgB,KAAI,YAAAV,IAAAA,EAAAA,EAAAA,MAAQ,CACbyD,GAAI,OAAJA,EAAIzD,EAAIF,KAAKiE,YAAAA,EAAc,GAC3BzC,MAAOoM,EAAe1N,EAAIF,MAC1BiL,OAAQ/K,EAAIF,KAAKiL,OACjBxH,MAAO,OAAPA,EAAOvD,EAAIuD,OAAAA,EAAS,YAExB,qBAAGE,EAAAA,IAAAA,MAGQ,eAAX9B,GACA7B,EAAK8B,UAGF9B,CAAAA,CAnB4B,CAyCAJ,EAAMiC,EAAQ+L,GAxEjB,SAChChO,EACAiC,EACA6L,EACA9L,EACAE,EACA8L,GAAAA,IAEM5N,EAAO8N,IACTlO,EAAKgB,KAAI,YAAAV,IAAAA,EAAAA,MAAQ,CACbyD,GAAIzD,EAAIF,KAAK2D,GACbnC,MAAOoM,EAAe1N,EAAIF,MAC1BiL,OAAQ/K,EAAIF,KAAKiL,OACjBxH,MAAO,OAAPA,EAAOvD,EAAIuD,OAAAA,EAAS,YAExB,qBAAGE,EAAAA,IAAAA,OAIS,aAAX9B,GACiB,YAAdD,GACc,WAAd8L,IAAAA,IACA5L,GACQ,eAAXD,GAAyC,YAAdD,IAAAA,IAA2BE,IAEvD9B,EAAK8B,UAGF9B,CAAAA,CA5ByB,CA2EJJ,EAAMiC,EAAQ6L,EAAW9L,EAAWE,EAAS8L,EAAAA,ECxEhEG,EAAS,oBAClBrM,QAAAA,OAAAA,IAAAA,EAAUD,EAAaC,QAAAA,EAAAA,EAAAA,EACvBC,KAAAA,OAAAA,IAAAA,EAAOF,EAAaE,KAAAA,EAAAA,EAAAA,EACpBH,MAAAA,OAAAA,IAAAA,EAAQC,EAAaD,MAAAA,EAAAA,EAAAA,EACrBuC,aAAAA,OAAAA,IAAAA,EAAetC,EAAasC,aAAAA,EAC5BiK,EAAAA,EAAAA,YAAAA,EAAAA,EACA9K,OAAAA,OAAAA,IAAAA,EAASzB,EAAayB,OAAAA,EAAAA,EAAAA,EACtBD,QAAAA,OAAAA,IAAAA,EAAUxB,EAAawB,QAAAA,EAAAA,EAAAA,EACvBK,YAAAA,OAAAA,IAAAA,EAAc7B,EAAa6B,YAAAA,EAAAA,EAAAA,EAC3BR,eAAAA,OAAAA,IAAAA,EAAiBrB,EAAaqB,eAAAA,EAAAA,EAAAA,EAC9BlB,UAAAA,OAAAA,IAAAA,EAAYH,EAAaG,UAAAA,EAAAA,EAAAA,EACzBC,OAAAA,OAAAA,IAAAA,EAASJ,EAAaI,OAAAA,EAAAA,EAAAA,EACtBC,QAAAA,OAAAA,IAAAA,EAAUL,EAAaK,QAAAA,EACvB9B,EAAAA,EAAAA,KAAAA,EAAAA,EACA+B,SAAAA,OAAAA,IAAAA,EAAWN,EAAaM,SAAAA,EAAAA,EAAAA,EACxBC,SAAAA,OAAAA,IAAAA,EAAWP,EAAaO,SAAAA,EACxBuI,EAAAA,EAAAA,OACAnK,EAAAA,EAAAA,MACAE,EAAAA,EAAAA,OAAAA,EAAAA,EACA+B,QAAAA,OAAAA,IAAAA,EAAUZ,EAAaY,QAAAA,EAAAA,EAAAA,EACvBC,aAAAA,OAAAA,IAAAA,EAAeb,EAAaa,aAAAA,EAAAA,EAAAA,EAC5BL,WAAAA,OAAAA,IAAAA,EAAaR,EAAaQ,WAAAA,EAAAA,EAAAA,EAC1BE,WAAAA,OAAAA,IAAAA,EAAaV,EAAaU,WAAAA,EAAAA,EAAAA,EAC1B+B,iBAAAA,OAAAA,IAAAA,EAAmBzC,EAAayC,iBAAAA,EAAAA,EAAAA,EAChCvB,YAAAA,OAAAA,IAAAA,EAAclB,EAAakB,YAAAA,EAAAA,EAAAA,EAC3BC,eAAAA,OAAAA,IAAAA,EAAiBnB,EAAamB,eAAAA,EAAAA,GAAAA,EAC9BC,gBAAAA,QAAAA,IAAAA,GAAkBpB,EAAaoB,gBAAAA,GAAAA,GAAAA,EAC/B5B,QAAAA,QAAAA,IAAAA,GAAUQ,EAAaR,QAAAA,GACvB0M,GAAAA,EAAAA,YAAAA,IA+BkCM,EAAAA,EAAAA,UAAAA,MAAS/J,EAAAA,EAAoB,IAAxDwH,GAAAA,GAAAA,GAAWwC,GAAAA,GAAAA,GACZhN,IAAc4E,EAAAA,EAAAA,cAAY,YAC5BoI,IAAa,YAAAC,OACTA,EAAMC,QAAQzK,IAAO,EAAIwK,EAAMvC,QAAO,YAAAhD,OAAQA,IAASjF,CAAAA,IAAAA,GAAAA,OAAUwK,EAAAA,CAAOxK,GAAAA,GAAAA,GAE7E,IAEG2E,IAAW+F,EAAAA,EAAAA,IAAoB3M,GAC/B4M,IAAWD,EAAAA,EAAAA,IAAoB7M,GAC/B4I,IAAkBiE,EAAAA,EAAAA,IAAoBtK,GACtCmG,IAAcqE,EAAAA,EAAAA,IAAkBP,GAEhChL,IAAQqC,EAAAA,EAAAA,MACR8E,IAAWqE,EAAAA,EAAAA,GAAqBtL,EAAQD,GACxCwL,IAAiBC,EAAAA,EAAAA,IACnBpL,EACAN,IAEE2L,IAAgBD,EAAAA,EAAAA,IAClB5L,EACAE,IAAAA,IAG+B,YAAdpB,EAA0B2J,EAAsB4B,GACvB,CAC1CtL,OAAAA,EACAC,QAAAA,EACA9B,KAAAA,EACAsI,SAAAA,GACA3G,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACA5B,MAAAA,EACAE,OAAAA,EACA6J,SAAAA,GACA9H,QAAAA,EACAC,aAAAA,EACAL,WAAAA,EACAE,WAAAA,EACAuJ,UAAAA,GACAxB,YAAAA,GACAE,gBAAAA,GACAG,OAAAA,IAlBI3K,GAAAA,GAAAA,KAAMyK,GAAAA,GAAAA,OAAQC,GAAAA,GAAAA,OAqBhBsE,IAAgBjJ,EAAAA,EAAAA,UAClB,kBACI/F,GACKgM,QACG,SAAC1L,GAAAA,OAAuE,OAAnBA,EAAIF,KAAK4D,KAAAA,IAEjEhD,KAAI,SAACV,EAAK2J,GAAAA,OAAAA,EAAAA,CAAAA,EACJ3J,EAAAA,CACH2J,MAAAA,GAAAA,GAAAA,GAEZ,CAACjK,KAGCiP,IAAuB/I,EAAAA,EAAAA,cACzB,gBAAG1F,EAAAA,EAAAA,MAAOE,EAAAA,EAAAA,OAAAA,QACDqC,KACDC,EAAiB,GAAKxC,EAAQwC,MAC9BC,GAAkB,GAAKvC,EAASuC,GAAAA,GAGxC,CAACF,EAAaC,EAAgBC,KAG5BiM,IAAanJ,EAAAA,EAAAA,UACf,kBACIhE,EAAKf,KAAI,YAAAmI,IACC7I,EAAMN,GAAKmP,MAAK,YAAA7O,OAAOA,EAAIF,KAAK2D,KAAOoF,CAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAEjC7I,EAAAA,CAAKF,KAAM,EAANA,CAAQ2D,GAAIoF,GAAAA,MAAQ7I,OAAAA,EAAAA,EAAKF,KAAM,CAAAiL,OAAQS,GAAUG,SAAS9C,MAAAA,GAAAA,GAEnF,CAAC2C,GAAW/J,EAAM/B,KAGhBoP,IAAoDrJ,EAAAA,EAAAA,UACtD,kBACI1E,GAAQL,KAAI,YAAAO,MAWD,CAACA,EAVKsM,EAAc,CACvB7N,KAA0B,SAApBuB,EAAOI,SAAsBuN,GAAalP,GAChD8N,UAAWvM,EAAOuM,UAClB3K,KAAM5B,EAAOI,SACbK,UAAAA,EACAC,OAAAA,EACA8L,YAAAA,GACA7L,QAAAA,IAAAA,GAAAA,GAKZ,CAACb,GAAS6N,GAAYlP,GAAMgC,EAAWC,EAAQ8L,GAAa7L,IAAAA,MAGzD,CACHlC,KAAAA,GACAgP,cAAAA,GACAvE,OAAAA,GACAC,OAAAA,GACAhC,SAAAA,GACAgG,SAAAA,GACAlE,gBAAAA,GACAF,YAAAA,GACAC,SAAAA,GACAsE,eAAAA,GACAE,cAAAA,GACAE,qBAAAA,GACAnD,UAAAA,GACAxK,YAAAA,GACA8N,gBAAAA,GAAAA,EAAAA,EAAAA,CAAAA,gBAAAA,UAAAA,eAAAA,QAAAA,iBC1JFC,EAAW,gBACbjP,EAAAA,EAAAA,KACA0B,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,KAEQuN,EAAAA,EAAR3E,OACAnK,EAAAA,EAAAA,MACAE,EAAAA,EAAAA,OAEAsB,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,SAEAC,EAAAA,EAAAA,WACAE,EAAAA,EAAAA,WAEAE,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aAEA6M,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,UAAAA,EAAAA,EACA7M,WAAAA,OAAAA,IAAAA,EAAa6B,EAAgB7B,WAAAA,EAAAA,EAAAA,EAC7BC,SAAAA,OAAAA,IAAAA,EAAW4B,EAAgB5B,SAAAA,EAAAA,EAAAA,EAC3BC,YAAAA,OAAAA,IAAAA,EAAc2B,EAAgB3B,YAAAA,EAAAA,EAAAA,EAC9BC,YAAAA,OAAAA,IAAAA,EAAc0B,EAAgB1B,YAAAA,EAC9B2M,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,YAAAA,EAAAA,EAEAjL,OAAAA,OAAAA,IAAAA,EAASD,EAAgBC,OAAAA,EAAAA,EAAAA,EACzBC,aAAAA,OAAAA,IAAAA,EAAeF,EAAgBE,aAAAA,EAAAA,EAAAA,EAE/B3B,YAAAA,OAAAA,IAAAA,EAAcyB,EAAgBzB,YAAAA,EAC9BnB,EAAAA,EAAAA,MAAAA,EAAAA,EACAoB,eAAAA,OAAAA,IAAAA,EAAiBwB,EAAgBxB,eAAAA,EAAAA,EAAAA,EACjCC,gBAAAA,OAAAA,IAAAA,EAAkBuB,EAAgBvB,gBAAAA,EAClCC,EAAAA,EAAAA,eAAAA,EAAAA,EAEAqB,QAAAA,OAAAA,IAAAA,EAAUC,EAAgBD,QAAAA,EAE1BlB,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,OAAAA,GAAAA,EACA2E,KAAAA,QAAAA,IAAAA,GAAOzD,EAAgByD,KAAAA,GAAAA,GAAAA,EACvBf,KAAAA,QAAAA,IAAAA,GAAO1C,EAAgB0C,KAAAA,GAAAA,GAAAA,EACvB1D,aAAAA,QAAAA,IAAAA,GAAegB,EAAgBhB,aAAAA,GAAAA,GAAAA,EAC/BC,YAAAA,QAAAA,IAAAA,GAAce,EAAgBf,YAAAA,GAC9BC,GAAAA,EAAAA,YAAAA,GAAAA,EAEAzD,YAAAA,QAAAA,IAAAA,GAAcuE,EAAgBvE,YAAAA,GAE9B8N,GAAAA,EAAAA,YACA5J,GAAAA,EAAAA,aAEAiK,GAAAA,EAAAA,YAAAA,GAAAA,EAEAzK,cAAAA,QAAAA,IAAAA,GAAgBa,EAAgBb,cAAAA,GAAAA,GAAAA,EAChCC,QAAAA,QAAAA,IAAAA,GAAUY,EAAgBZ,QAAAA,GAC1BsB,GAAAA,EAAAA,QACAC,GAAAA,EAAAA,aACAC,GAAAA,EAAAA,aAEA/D,GAAAA,EAAAA,QAAAA,GAAAA,EAEA+G,KAAAA,QAAAA,IAAAA,GAAO5D,EAAgB4D,KAAAA,GACvB9C,GAAAA,EAAAA,UACAC,GAAAA,EAAAA,eACAC,GAAAA,EAAAA,gBAAAA,GAAAA,EACAH,YAAAA,QAAAA,IAAAA,GAAcb,EAAgBa,YAAAA,GAC9BsK,GAAAA,EAAAA,aACAC,GAAAA,EAAAA,kBACAC,GAAAA,EAAAA,mBAEAvL,GAAAA,EAAAA,iBAAAA,IAE0CwL,EAAAA,EAAAA,MAAlC5H,GAAAA,GAAAA,QAAiB6H,GAAAA,GAARC,OAAAA,IACoDC,EAAAA,EAAAA,IACjEzP,EACAE,EACA4O,GAHIY,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAaxF,GAAAA,GAAAA,OAAQyF,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAAA,GAkBjDlC,EAAiB,CACjBrM,QAAAA,EACAF,MAAAA,EACAuC,aAAAA,GACAiK,YAAAA,GACA9K,OAAAA,EACAD,QAAAA,EACAK,YAAAA,GACAR,eAAAA,EACAlB,UAAAA,EACAC,OAAAA,EACAC,QAAAA,EACA9B,KAAAA,EACA2B,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACAuI,OAAAA,GACAnK,MAAO4P,GACP1P,OAAQ2P,GACR5N,QAAAA,EACAC,aAAAA,EACAL,WAAAA,EACAE,WAAAA,EACAQ,YAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACA5B,QAAAA,GACA0M,YAAAA,GACAzJ,iBAAAA,KAvCAtE,GAAAA,GAAAA,KACAgP,GAAAA,GAAAA,cACAvE,GAAAA,GAAAA,OACAC,GAAAA,GAAAA,OACAgE,GAAAA,GAAAA,SACAlE,GAAAA,GAAAA,gBACAqE,GAAAA,GAAAA,eACAE,GAAAA,GAAAA,cACAE,GAAAA,GAAAA,qBACA3N,GAAAA,GAAAA,YACA8N,GAAAA,GAAAA,gBAgCEkB,IAAaC,EAAAA,EAAAA,eAcjBvB,GAAe,CACbjN,KAAM,YAAAzB,OAAOA,EAAI6I,GAAAA,EACjBhG,KAAM,YAAA7C,OAAAA,EAAAA,CACFoD,YAAamL,GAAevO,GAC5BuD,MAAOvD,EAAIuD,MACXnD,OAAQ,EACRkE,WAAYmK,GAAczO,GAC1BuE,aAAc,EACdC,OAAQxE,EAAIE,MAAQ,EACpBuE,OAAQzE,EAAII,OAAS,EACrBsE,UAAW,aAAa1E,EAAIC,EAAAA,MAAMD,EAAIG,EAAIH,EAAII,QAAAA,IAC9CF,MAAOF,EAAIE,OACI,aAAXyB,EACE,CAAC,EACD,CACIvB,OAAQJ,EAAII,OACZsE,UAAW,aAAa1E,EAAIC,EAAAA,KAAMD,EAAIG,EAAAA,IACtCD,MAAO,KAGrBgQ,MAAO,YAAAlQ,MAAQ,CACXoD,YAAamL,GAAevO,GAC5BuD,MAAOvD,EAAIuD,MACXnD,OAAQJ,EAAII,OACZkE,WAAYmK,GAAczO,GAC1BuE,aAAc,EACdC,OAAQxE,EAAIE,MAAQ,EACpBuE,OAAQzE,EAAII,OAAS,EACrBsE,UAAW,aAAa1E,EAAIC,EAAAA,KAAMD,EAAIG,EAAAA,IACtCD,MAAOF,EAAIE,MAAAA,EAEfiQ,OAAQ,YAAAnQ,MAAQ,CACZoD,YAAamL,GAAevO,GAC5BuD,MAAOvD,EAAIuD,MACXnD,OAAQJ,EAAII,OACZkE,WAAYmK,GAAczO,GAC1BuE,aAAc,EACdC,OAAQxE,EAAIE,MAAQ,EACpBuE,OAAQzE,EAAII,OAAS,EACrBsE,UAAW,aAAa1E,EAAIC,EAAAA,KAAMD,EAAIG,EAAAA,IACtCD,MAAOF,EAAIE,MAAAA,EAEfkQ,MAAO,YAAApQ,OAAAA,EAAAA,CACHoD,YAAamL,GAAevO,GAC5BuD,MAAOvD,EAAIuD,MACXnD,OAAQ,EACRkE,WAAYmK,GAAczO,GAC1BuE,aAAc,EACdC,OAAQxE,EAAIE,MAAQ,EACpBuE,OAAQ,EACRC,UAAW,aAAa1E,EAAIC,EAAAA,MAAMD,EAAIG,EAAIH,EAAII,QAAAA,IAC9CF,MAAOF,EAAIE,OACI,aAAXyB,EACE,CAAC,EACD,CACI6C,OAAQ,EACRC,OAAQzE,EAAII,OAAS,EACrBA,OAAQJ,EAAII,OACZsE,UAAW,aAAa1E,EAAIC,EAAAA,KAAMD,EAAIG,EAAAA,IACtCD,MAAO,KAGrBwP,OAAQD,GACRY,WAAYzI,KAGV0I,IAAc7K,EAAAA,EAAAA,UAChB,iBAAO,CACHvC,aAAAA,GACAC,YAAAA,GACAV,YAAAA,EACAY,cAAAA,GACAX,eAAAA,EACAC,gBAAAA,EACAiC,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAoF,gBAAAA,GACA5G,QAAAA,GACAyB,YAAAA,GACAC,UAAWqK,GACXpK,eAAgBqK,GAChBpK,gBAAiBqK,GAAAA,GAErB,CACIrM,GACAC,GACAV,EACAyH,GACA7G,GACAV,EACAD,EACAkC,GACAC,GACAC,GACAxB,GACAyB,GACAsK,GACAC,GACAC,KAIFgB,IAAYC,EAAAA,EAAAA,IAAS7I,GAAMjI,GAAMkH,GAAM,CACzC6J,QAAS,OACTC,UAAW,cAGTC,GAA2C,CAC7ChR,YAAa,KACbiR,KAAM,KACNlR,KAAM,KACNmR,KAAM,KACN9P,QAAS,KACTkD,QAAS,MAGTE,EAAOwH,SAAS,iBAChBgF,GAAUhR,aACNc,EAAAA,EAAAA,KAACjB,EAAAA,CAAiCE,KAAMA,GAAMC,YAAaA,IAAvC,gBAIxBwE,EAAOwH,SAAS,UAChBgF,GAAUC,MACNnQ,EAAAA,EAAAA,KAACqQ,EAAAA,GAAAA,CAEG3G,OAAQA,GACRC,OAAQA,GACRlK,MAAO4P,GACP1P,OAAQ2P,GACR7E,IAAK+D,EACL8B,MAAO7B,EACP8B,OAAQ3O,EACR4I,KAAM3I,GARF,SAaZ6B,EAAOwH,SAAS,UAChBgF,GAAUjR,MACNe,EAAAA,EAAAA,KAACwQ,EAAAA,SAAAA,CAAAA,SACIjB,IAAW,SAAC3L,EAAOrE,GAAAA,OAChB0F,EAAAA,EAAAA,eAActB,EAAAA,EAAAA,CAAAA,EACPkM,GAAAA,CACHtQ,IAAAA,EACAqE,MAAAA,EACAM,kBAAmBgK,GAAqB3O,GACxCsB,MAAO8M,GAASpO,EAAIF,QAAAA,KAPlB,SAclBqE,EAAOwH,SAAS,UAChBgF,GAAUE,MACNpQ,EAAAA,EAAAA,KAACyQ,EAAAA,GAAAA,CAEGhR,MAAO4P,GACP1P,OAAQ2P,GACR5F,OAAQ5H,EAAc4H,GAAS,KAC/BC,OAAQ5H,EAAc4H,GAAS,KAC/B+G,QAAShC,EACTiC,QAAShC,GANL,SAWZjL,EAAOwH,SAAS,aAChBgF,GAAU5P,SACNN,EAAAA,EAAAA,KAACK,EAAAA,CAEGZ,MAAO4P,GACP1P,OAAQ2P,GACRhP,QAAS+N,GACT9N,YAAaA,IAJT,YASZmD,EAAOwH,SAAS,aAChBgF,GAAU1M,SACNxD,EAAAA,EAAAA,KAAC4Q,EAAAA,GAAAA,CAEGpN,QAASA,EACT/D,MAAO4P,GACP1P,OAAQ2P,GACR5F,OAAQA,GACRC,OAAQA,IALJ,gBAUVkH,IAA8C7L,EAAAA,EAAAA,UAChD,uBACO6K,GAAAA,CACHjG,OAAAA,GACAnK,MAAAA,EACAE,OAAAA,EACA0P,WAAAA,GACAC,YAAAA,GACArQ,KAAAA,GACAkP,WAAYE,GACZrM,YAAAA,EACA0H,OAAAA,GACAC,OAAAA,GACA9G,QAAAA,GACA4G,gBAAAA,GACAtF,QAAAA,GACAC,aAAAA,GACAC,aAAAA,IAAAA,GAEJ,CACIwL,GACAjG,GACAnK,EACAE,EACA0P,GACAC,GACArQ,GACAoP,GACArM,EACA0H,GACAC,GACA9G,GACA4G,GACAtF,GACAC,GACAC,KAAAA,OAKJrE,EAAAA,EAAAA,KAAC8Q,EAAAA,GAAAA,CACGrR,MAAO0P,GACPxP,OAAQyP,GACRxF,OAAQA,GACR1C,KAAM4I,GACNzI,KAAMA,GACN9C,UAAWA,GACXC,eAAgBA,GAChBC,gBAAiBA,GACjBH,YAAaA,GAAAA,SAEZZ,EAAOzD,KAAI,SAAC8Q,EAAO5Q,GAAAA,IAAAA,EAAAA,MACK,mBAAV4Q,GACA/Q,EAAAA,EAAAA,KAACwQ,EAAAA,SAAAA,CAAAA,UAAkBvL,EAAAA,EAAAA,eAAc8L,EAAOF,KAAzB1Q,GAAAA,OAAAA,EAAAA,MAGnB+P,QAAAA,EAAAA,GAAYa,IAAAA,EAAU,WAMhCC,EAAM,SAAAhS,GAAA,QACf4D,cAAAA,OAAAA,IAAAA,EAAgBa,EAAgBb,cAAAA,EAAAA,EAAAA,EAChCuE,QAAAA,OAAAA,IAAAA,EAAU1D,EAAgB0D,QAAAA,EAAAA,EAAAA,EAC1BC,aAAAA,OAAAA,IAAAA,EAAe3D,EAAgB2D,aAAAA,EAC/B/E,EAAAA,EAAAA,MACA4O,EAAAA,EAAAA,cACGC,EAAAA,EAAAA,EAAAA,GAAAA,OAEHlR,EAAAA,EAAAA,KAACmR,EAAAA,GAAAA,CAEOhK,QAAAA,EACAvE,cAAAA,EACAwE,aAAAA,EACA6J,cAAAA,EACA5O,MAAAA,EAAAA,UAGJrC,EAAAA,EAAAA,KAACsO,EAAAA,EAAAA,CAAmB1L,cAAeA,GAAmBsO,KAAAA,EAAAA,EAAAA,CAAAA,gBAAAA,gBAAAA,SChZxDE,EAAqB,SACvBC,EACAzH,EACApK,EACAE,GAAAA,OAEA2R,EAAMjD,MAAK,YAAAkD,OACPC,EAAAA,EAAAA,IAAeD,EAAK9R,EAAIoK,EAAOY,KAAM8G,EAAK5R,EAAIkK,EAAOa,IAAK6G,EAAK7R,MAAO6R,EAAK3R,OAAQH,EAAGE,EAAAA,GAAAA,EAKxF8R,EAAiB,gBACnBnS,EAAAA,EAAAA,KACA0B,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,KAEQuN,EAAAA,EAAR3E,OACAnK,EAAAA,EAAAA,MACAE,EAAAA,EAAAA,OAEAsB,EAAAA,EAAAA,UACAC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SACAC,EAAAA,EAAAA,SAEAC,EAAAA,EAAAA,WACAE,EAAAA,EAAAA,WAEAE,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,aAEA6M,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,UAAAA,EAAAA,EACA7M,WAAAA,OAAAA,IAAAA,EAAa0F,EAAmB1F,WAAAA,EAAAA,EAAAA,EAChCC,SAAAA,OAAAA,IAAAA,EAAWyF,EAAmBzF,SAAAA,EAAAA,EAAAA,EAC9BC,YAAAA,OAAAA,IAAAA,EAAcwF,EAAmBxF,YAAAA,EAAAA,EAAAA,EACjCC,YAAAA,OAAAA,IAAAA,EAAcuF,EAAmBvF,YAAAA,EACjC2M,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,YAAAA,EAAAA,EAEAjL,OAAAA,OAAAA,IAAAA,EAAS4D,EAAmB5D,OAAAA,EAAAA,EAAAA,EAC5B+N,UAAAA,OAAAA,IAAAA,EAAY,SACRC,EAAAA,GAAAA,IAAAA,EAAAA,EAEInS,IAAOuD,EAAAA,EAAAA,MAAOnD,EAAAA,EAAAA,OAAQF,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,EAAGE,EAAAA,EAAAA,EAEhCiD,EAAAA,EAAAA,YACAF,EAAAA,EAAAA,aACAC,EAAAA,EAAAA,YACA7B,EAAAA,EAAAA,MACAgD,EAAAA,EAAAA,WACAK,EAAAA,EAAAA,kBAAAA,GAGJwN,EAAIC,UAAY7O,EAEZJ,EAAc,IACdgP,EAAIE,YAAcjP,EAClB+O,EAAIG,UAAYnP,GAGpBgP,EAAII,YAEArP,EAAe,EAAG,KACZsP,EAASjS,KAAKiI,IAAItF,EAAc9C,GAEtC+R,EAAIM,OAAOxS,EAAIuS,EAAQrS,GACvBgS,EAAIO,OAAOzS,EAAIC,EAAQsS,EAAQrS,GAC/BgS,EAAIQ,iBAAiB1S,EAAIC,EAAOC,EAAGF,EAAIC,EAAOC,EAAIqS,GAClDL,EAAIO,OAAOzS,EAAIC,EAAOC,EAAIC,EAASoS,GACnCL,EAAIQ,iBAAiB1S,EAAIC,EAAOC,EAAIC,EAAQH,EAAIC,EAAQsS,EAAQrS,EAAIC,GACpE+R,EAAIO,OAAOzS,EAAIuS,EAAQrS,EAAIC,GAC3B+R,EAAIQ,iBAAiB1S,EAAGE,EAAIC,EAAQH,EAAGE,EAAIC,EAASoS,GACpDL,EAAIO,OAAOzS,EAAGE,EAAIqS,GAClBL,EAAIQ,iBAAiB1S,EAAGE,EAAGF,EAAIuS,EAAQrS,GACvCgS,EAAIS,WAAAA,MAEJT,EAAI3L,KAAKvG,EAAGE,EAAGD,EAAOE,GAG1B+R,EAAIvL,OAEAzD,EAAc,GACdgP,EAAIrL,SAGJnC,IACAwN,EAAIU,aAAe,SACnBV,EAAIW,UAAY,SAChBX,EAAIC,UAAY9N,EAChB6N,EAAIY,SAASzR,EAAOrB,EAAIC,EAAQ,EAAGC,EAAIC,EAAS,OAAA4S,EAAAA,EAIxDvQ,YAAAA,OAAAA,IAAAA,EAAcsF,EAAmBtF,YAAAA,EACjCnB,EAAAA,EAAAA,MAAAA,EAAAA,EACAoB,eAAAA,OAAAA,IAAAA,EAAiBqF,EAAmBrF,eAAAA,EAAAA,EAAAA,EACpCC,gBAAAA,OAAAA,IAAAA,EAAkBoF,EAAmBpF,gBAAAA,EACrCC,EAAAA,EAAAA,eAEAG,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,OAAAA,EAAAA,EACAE,aAAAA,QAAAA,IAAAA,EAAe6E,EAAmB7E,aAAAA,EAAAA,GAAAA,EAClCC,YAAAA,QAAAA,IAAAA,GAAc4E,EAAmB5E,YAAAA,GACjCC,GAAAA,EAAAA,YAAAA,GAAAA,EAEAzD,YAAAA,QAAAA,IAAAA,GAAcoI,EAAmBpI,YAAAA,GAEjC8N,GAAAA,EAAAA,YACA5J,GAAAA,EAAAA,aAEAiK,GAAAA,EAAAA,YAAAA,GAAAA,EAEAzK,cAAAA,QAAAA,IAAAA,GAAgB0E,EAAmB1E,cAAAA,GAAAA,GAAAA,EACnCC,QAAAA,QAAAA,IAAAA,GAAUyE,EAAmBzE,QAAAA,GAC7BsB,GAAAA,EAAAA,QACAC,GAAAA,EAAAA,aACAC,GAAAA,EAAAA,aAEA/D,GAAAA,EAAAA,QAAAA,GAAAA,EAEAiH,WAAAA,QAAAA,IAAAA,GAAaD,EAAmBC,WAAAA,GAEhCiL,GAAAA,EAAAA,UAEMC,IAAWC,EAAAA,EAAAA,QAAiC,MAE5CrQ,IAAQqC,EAAAA,EAAAA,MAAAA,IACuDwK,EAAAA,EAAAA,IACjEzP,EACAE,EACA4O,GAHI3E,GAAAA,GAAAA,OAAQyF,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAaH,GAAAA,GAAAA,WAAYC,GAAAA,GAAAA,YAAAA,GAiBjDhC,EAAiB,CACjBrM,QAAAA,EACAF,MAAAA,EACAuC,aAAAA,GACAiK,YAAAA,GACA9K,OAAAA,EACAD,QAAAA,EACAK,YAAAA,GACAR,eAAAA,EACAlB,UAAAA,EACAC,OAAAA,EACAC,QAAAA,EACA9B,KAAAA,EACA2B,KAAAA,EACAI,SAAAA,EACAC,SAAAA,EACAuI,OAAAA,GACAnK,MAAO4P,GACP1P,OAAQ2P,GACR5N,QAAAA,EACAC,aAAAA,EACAL,WAAAA,EACAE,WAAAA,EACAQ,YAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACA5B,QAAAA,GACA0M,YAAAA,KArCA/N,GAAAA,GAAAA,KACAgP,GAAAA,GAAAA,cACAvE,GAAAA,GAAAA,OACAC,GAAAA,GAAAA,OACAgE,GAAAA,GAAAA,SACAlE,GAAAA,GAAAA,gBACAqE,GAAAA,GAAAA,eACAE,GAAAA,GAAAA,cACAE,GAAAA,GAAAA,qBACAG,GAAAA,GAAAA,gBAAAA,IA+B0C1J,EAAAA,EAAAA,MAAtCC,GAAAA,GAAAA,qBAAsBE,GAAAA,GAAAA,YAGxB3F,IAAwBwT,EAAAA,EAAAA,IAAuB,CACjDzT,aAAaE,EAAAA,EAAAA,IAAe,CACxBC,KAAMJ,GACNC,YAAAA,GACAI,YAAa,YAAAgS,MAAS,CAClB9R,EAAG8R,EAAK9R,EACRE,EAAG4R,EAAK5R,EAAAA,EAEZE,cAAe,gBAAGH,EAAAA,EAAAA,MAAOE,EAAAA,EAAAA,OAAAA,MAAc,CACnCF,MAAAA,EACAE,OAAAA,EACAE,KAAMC,KAAKC,IAAIN,EAAOE,GAAAA,MAM5BkR,IAAoD7L,EAAAA,EAAAA,UACtD,iBAAO,CACHvC,aAAAA,GACAC,YAAAA,GACAE,cAAAA,GACA0B,aAAa,EACbrC,eAAAA,EACAC,gBAAAA,EACA0H,OAAAA,GACAnK,MAAAA,EACAE,OAAAA,EACA0P,WAAAA,GACAC,YAAAA,GACArQ,KAAAA,GACAkP,WAAYE,GACZrM,YAAAA,EACA0H,OAAAA,GACAC,OAAAA,GACA9G,QAAAA,GACA4G,gBAAAA,GACAtF,QAAAA,GACAC,aAAAA,GACAC,aAAAA,GAAAA,GAEJ,CACI5B,GACAC,GACAE,GACAX,EACAC,EACA0H,GACAnK,EACAE,EACA0P,GACAC,GACArQ,GACAoP,GACArM,EACA0H,GACAC,GACA9G,GACA4G,GACAtF,GACAC,GACAC,MAIRuO,EAAAA,EAAAA,YAAU,iBACAlB,EAAAA,OAAAA,EAAMe,GAASI,cAAAA,EAATC,EAAkBC,WAAW,MAEpCN,GAASI,SACTnB,IAELe,GAASI,QAAQpT,MAAQ0P,GAAa5H,GACtCkL,GAASI,QAAQlT,OAASyP,GAAc7H,GAExCmK,EAAI/F,MAAMpE,GAAYA,IAEtBmK,EAAIC,UAAYtP,GAAM2Q,WACtBtB,EAAIuB,SAAS,EAAG,EAAG9D,GAAYC,IAC/BsC,EAAIwB,UAAUtJ,GAAOY,KAAMZ,GAAOa,KAElC/G,EAAOqG,SAAQ,YACG,SAAVgH,EA3PuD,iBA4P1C1O,GAAM+N,KAAK+C,KAAK/M,aAAgB/D,GAAM+N,KAAK+C,KAAK/M,YAAc,IACvEsL,EAAIG,UAAYxP,GAAM+N,KAAK+C,KAAK/M,YAChCsL,EAAIE,YAAcvP,GAAM+N,KAAK+C,KAAK9M,OAE9BvE,IACAsR,EAAAA,EAAAA,IAAyC1B,EAAK,CAC1CjS,MAAAA,EACAE,OAAAA,EACAgM,MAAOjC,GACP9B,KAAM,IACN0D,OAAQoD,IAIZ3M,IACAqR,EAAAA,EAAAA,IAAyC1B,EAAK,CAC1CjS,MAAAA,EACAE,OAAAA,EACAgM,MAAOhC,GACP/B,KAAM,IACN0D,OAAQqD,KAIH,SAAVoC,GACPsC,EAAAA,EAAAA,IAAmB3B,EAAK,CACpBhI,OAAQA,GACRC,OAAQA,GACRlK,MAAO4P,GACP1P,OAAQ2P,GACR7E,IAAK+D,EACL8B,MAAO7B,EACP8B,OAAQ3O,EACR4I,KAAM3I,EACNQ,MAAAA,KAEa,SAAV0O,EACP9C,GAAclE,SAAQ,YAClB0H,EAAUC,EAAK,CACXnS,IAAAA,EACAoD,YAAamL,GAAevO,GAC5BkD,aAAAA,GACAC,YAAAA,GACA7B,MAAO8M,GAASpO,EAAIF,MACpBwE,WAAYmK,GAAczO,GAC1B2E,kBAAmBgK,GAAqB3O,IAAAA,IAG/B,YAAVwR,EACP1C,GAAgBtE,SAAQ,gBAAEvJ,EAAAA,EAAAA,GAAQnB,EAAAA,EAAAA,IAC9BiU,EAAAA,EAAAA,IAAqB5B,EAAAA,EAAAA,CAAAA,EACdlR,EAAAA,CACHnB,KAAAA,EACAqB,eAAgB2O,GAChB1O,gBAAiB2O,GACjBjN,MAAAA,KAAAA,IAGS,gBAAV0O,GACPwC,EAAAA,EAAAA,IAA0B7B,EAAK,CAAExS,YAAaC,GAAkBkD,MAAAA,KACxC,mBAAV0O,GACdA,EAAMW,EAAKb,GAAAA,IAInBa,EAAI8B,OAAAA,GACL,CACC5R,EACAC,EACA4M,EACAD,EACAP,GACAxL,GACAC,GACAvD,GACA2C,EACAC,EACA+L,GACAH,GACAK,GACAU,EACAC,EACA1N,EACAtB,EACA2P,GACAD,GACAwB,GACAnN,EACAxC,EACAmN,GACAzE,GAAOY,KACPZ,GAAOa,IACP2E,GACAD,GACA5H,GACAkK,EACA/H,GACAC,GACAxI,EACA+M,GACA7L,GACA5C,IAAAA,IAGEgU,IAAmBtO,EAAAA,EAAAA,cACrB,SAACC,GAAAA,GACQnG,IACAwT,GAASI,QAAS,CAATA,IAAAA,GAECa,EAAAA,EAAAA,IAAkBjB,GAASI,QAASzN,GAA5C5F,EAAAA,EAAAA,GAAGE,EAAAA,EAAAA,GACJH,EAAM6R,EAAmBnS,GAAM2K,GAAQpK,EAAGE,QAAAA,IAE5CH,GACAqF,IACIK,EAAAA,EAAAA,eAAcpC,GAAAA,EAAAA,CAAAA,EACPtD,EAAIF,KAAAA,CACPyD,MAAOvD,EAAIuD,MACXjC,MAAOtB,EAAIsB,MACXoC,MAAOuF,OAAOjJ,EAAIF,KAAK4D,UAE3BmC,GAGe,eAAfA,EAAM7D,OAAAA,MACN6C,IAAAA,GAAe7E,EAAIF,KAAM+F,KAG7BN,IAAAA,CAAAA,GAGR,CAACA,GAAa8E,GAAQxF,GAAcnF,GAAM2F,GAAsB/B,KAG9D0C,IAAmBJ,EAAAA,EAAAA,cACrB,SAACC,GAAAA,GACQnG,IACAwT,GAASI,QAAS,CAEvB/N,KAAAA,IAAAA,GAEe4O,EAAAA,EAAAA,IAAkBjB,GAASI,QAASzN,GAA5C5F,EAAAA,EAAAA,GAAGE,EAAAA,EAAAA,GACJH,EAAM6R,EAAmBnS,GAAM2K,GAAQpK,EAAGE,GAE5CH,IAAAA,MACA8E,IAAAA,GAAe9E,EAAIF,KAAM+F,GAAAA,CAAAA,GAGjC,CAACN,GAAa8E,GAAQvF,GAAcpF,KAGlCiG,IAAcC,EAAAA,EAAAA,cAChB,SAACC,GAAAA,GACQnG,IACAwT,GAASI,QAAS,CAATA,IAAAA,GAECa,EAAAA,EAAAA,IAAkBjB,GAASI,QAASzN,GAA5C5F,EAAAA,EAAAA,GAAGE,EAAAA,EAAAA,GACJH,EAAM6R,EAAmBnS,GAAM2K,GAAQpK,EAAGE,QAAAA,IAE5CH,IAAAA,MACA4E,IAAAA,GAAAA,EAAAA,CAAAA,EAAe5E,EAAIF,KAAM,CAAAyD,MAAOvD,EAAIuD,QAASsC,GAAAA,CAAAA,GAGrD,CAACwE,GAAQzF,GAASlF,KAAAA,OAIlBe,EAAAA,EAAAA,KAAAA,SAAAA,CACI2T,IAAK,YACDlB,GAASI,QAAUe,EACfpB,IAAa,YAAaA,KAAWA,GAAUK,QAAUe,EAAAA,EAEjEnU,MAAO0P,GAAa5H,GACpB5H,OAAQyP,GAAc7H,GACtB3D,MAAO,CACHnE,MAAO0P,GACPxP,OAAQyP,GACRyE,OAAQjR,GAAgB,OAAS,UAErCwB,aAAcxB,GAAgB6Q,QAAAA,EAC9BhN,YAAa7D,GAAgB6Q,QAAAA,EAC7BpP,aAAczB,GAAgB2C,QAAAA,EAC9BpB,QAASvB,GAAgBsC,QAAAA,GAAcsB,EAKtCsN,GAAYC,EAAAA,EAAAA,aACrB,WAEIJ,GAAAA,IADE/Q,EAAAA,EAAAA,cAAeqO,EAAAA,EAAAA,cAAe5O,EAAAA,EAAAA,MAAU2I,EAAAA,EAAAA,EAAAA,GAAAA,OAG1ChL,EAAAA,EAAAA,KAACmR,EAAAA,GAAAA,CAAgBvO,cAAAA,EAAeqO,cAAAA,EAAe5O,MAAAA,EAAS8E,SAAAA,EAAS6M,UAC7DhU,EAAAA,EAAAA,KAACwR,EAAAA,EAAAA,CAAAA,EAA6BxG,EAAAA,CAAOwH,UAAWmB,MAAAA,IC5e/CM,EAAgB,SACzBjJ,GAAAA,OAEAhL,EAAAA,EAAAA,KAACkU,EAAAA,EAAAA,CAAAA,SACI,gBAAGzU,EAAAA,EAAAA,MAAOE,EAAAA,EAAAA,OAAAA,OAAaK,EAAAA,EAAAA,KAACgR,EAAAA,EAAAA,CAAcvR,MAAOA,EAAOE,OAAQA,GAAYqL,GAAAA,GAAAA,GCH9C+I,EAAAA,EAAAA,aAAW,SAE5C/I,EAA2D2I,GAAAA,OAErD3T,EAAAA,EAAAA,KAACkU,EAAAA,EAAAA,CAAAA,SACI,gBAAGzU,EAAAA,EAAAA,MAAOE,EAAAA,EAAAA,OAAAA,OACPK,EAAAA,EAAAA,KAAC8T,EAAAA,EAAAA,CACGrU,MAAOA,EACPE,OAAQA,GACHqL,EAAAA,CACL2I,IAAKA,IAAAA,GAAAA,G","sources":["../node_modules/@nivo/bar/src/BarAnnotations.tsx","../node_modules/@nivo/bar/src/BarLegends.tsx","../node_modules/@nivo/bar/src/BarItem.tsx","../node_modules/@nivo/bar/src/props.ts","../node_modules/@nivo/bar/src/BarTooltip.tsx","../node_modules/@nivo/bar/src/compute/common.ts","../node_modules/@nivo/bar/src/compute/grouped.ts","../node_modules/@nivo/bar/src/compute/stacked.ts","../node_modules/@nivo/bar/src/compute/legends.ts","../node_modules/@nivo/bar/src/hooks.ts","../node_modules/@nivo/bar/src/Bar.tsx","../node_modules/@nivo/bar/src/BarCanvas.tsx","../node_modules/@nivo/bar/src/ResponsiveBar.tsx","../node_modules/@nivo/bar/src/ResponsiveBarCanvas.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport {\n    BarCustomLayerProps,\n    BarDatum,\n    BarLayer,\n    BarLayerId,\n    BarSvgProps,\n    ComputedBarDatumWithValue,\n} from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel = svgDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = svgDefaultProps.labelSkipWidth,\n    labelSkipHeight = svgDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BarCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            commonProps,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    BarCanvasCustomLayerProps,\n    BarCanvasLayer,\n    BarCanvasProps,\n    BarDatum,\n    ComputedBarDatum,\n} from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel = canvasDefaultProps.enableLabel,\n    label,\n    labelSkipWidth = canvasDefaultProps.labelSkipWidth,\n    labelSkipHeight = canvasDefaultProps.labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: BarCanvasCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            isFocusable: false,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendData: legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            bars,\n            legendsWithData,\n            enableLabel,\n            xScale,\n            yScale,\n            tooltip,\n            getTooltipLabel,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"names":["BarAnnotations","e","bars","annotations","boundAnnotations","useAnnotations","data","getPosition","bar","x","width","y","height","getDimensions","size","Math","max","_jsx","map","annotation","i","Annotation","BarLegends","legends","toggleSerie","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","label","defaultProps","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","theme","colorBy","colors","scheme","borderRadius","borderWidth","borderColor","isInteractive","tooltip","color","BasicTooltip","id","value","formattedValue","enableChip","tooltipLabel","datum","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","style","labelColor","labelOpacity","labelX","labelY","transform","shouldRenderLabel","onClick","onMouseEnter","onMouseLeave","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","useTheme","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","undefined","onMouseMove","onFocus","onBlur","text","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","key","filterNullValues","Object","coerceValue","Number","gt","other","lt","range","start","end","Array","repeat","_","index","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","d","rawValue","barHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","generateGroupedBars","s","indexScaleConfig","hiddenIds","props","filter","includes","otherAxis","scaleSpec","clampMin","values","entry","k","Boolean","isFinite","scale","bandwidth","params","ge","flattenDeep","arr","some","isArray","concat","generateVerticalStackedBars","stackedData","stackedDataItem","generateHorizontalStackedBars","generateStackedBars","array","stack","offset","stackOffsetDiverging","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","_uniqBy","useBar","valueFormat","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useMotionConfig","springConfig","config","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","transition","useTransition","enter","update","leave","immediate","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","Bar","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","renderBar","ctx","fillStyle","strokeStyle","lineWidth","beginPath","radius","moveTo","lineTo","quadraticCurveTo","closePath","textBaseline","textAlign","fillText","Q","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","current","_canvasEl$current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","renderAnnotationsToCanvas","save","handleMouseHover","getRelativeCursor","ref","canvas","cursor","BarCanvas","forwardRef","children","ResponsiveBar","ResponsiveWrapper"],"sourceRoot":""}